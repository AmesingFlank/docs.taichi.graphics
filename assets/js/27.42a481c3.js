(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{443:function(t,s,a){"use strict";a.r(s);var e=a(20),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"developer-utilities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#developer-utilities"}},[t._v("#")]),t._v(" Developer utilities")]),t._v(" "),a("p",[t._v("This section provides a detailed description of some commonly used\nutilities for Taichi developers.")]),t._v(" "),a("h2",{attrs:{id:"logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[t._v("#")]),t._v(" Logging")]),t._v(" "),a("p",[t._v("Taichi uses "),a("a",{attrs:{href:"https://github.com/gabime/spdlog",target:"_blank",rel:"noopener noreferrer"}},[t._v("spdlog"),a("OutboundLink")],1),t._v(" as its logging\nsystem. Logs can have different levels, from low to high, they are:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LEVELS")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("trace")])]),t._v(" "),a("tr",[a("td",[t._v("debug")])]),t._v(" "),a("tr",[a("td",[t._v("info")])]),t._v(" "),a("tr",[a("td",[t._v("warn")])]),t._v(" "),a("tr",[a("td",[t._v("error")])])])]),t._v(" "),a("p",[t._v("The higher the level is, the more critical the message is.")]),t._v(" "),a("p",[t._v("The default logging level is "),a("code",[t._v("info")]),t._v(". You may override the default\nlogging level by:")]),t._v(" "),a("ol",[a("li",[t._v("Setting the environment variable like "),a("code",[t._v("export TI_LOG_LEVEL=warn")]),t._v(".")]),t._v(" "),a("li",[t._v("Setting the log level from Python side:\n"),a("code",[t._v("ti.set_logging_level(ti.WARN)")]),t._v(".")])]),t._v(" "),a("p",[t._v("In "),a("strong",[t._v("Python")]),t._v(", you may write logs using the "),a("code",[t._v("ti.*")]),t._v(" interface:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Python")]),t._v("\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("In "),a("strong",[t._v("C++")]),t._v(", you may write logs using the "),a("code",[t._v("TI_*")]),t._v(" interface:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C++")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_TRACE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_DEBUG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_WARN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_ERROR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("If one raises a message of the level "),a("code",[t._v("error")]),t._v(", Taichi will be\n"),a("strong",[t._v("terminated")]),t._v(" immediately and result in a "),a("code",[t._v("RuntimeError")]),t._v(" on Python\nside.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C++")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_ERROR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The pointer cannot be null!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// will not reach here if p == nullptr")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("do_something")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("For people from Linux kernels, "),a("code",[t._v("TI_ERROR")]),t._v(" is just "),a("code",[t._v("panic")]),t._v(".")])]),t._v(" "),a("p",[t._v("You may also simplify the above code by using "),a("code",[t._v("TI_ASSERT")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_ASSERT_INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The pointer cannot be null!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TI_ASSERT(p != nullptr);")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// will not reach here if p == nullptr")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("do_something")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"benchmarking-and-regression-tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#benchmarking-and-regression-tests"}},[t._v("#")]),t._v(" Benchmarking and regression tests")]),t._v(" "),a("ul",[a("li",[t._v("Run "),a("code",[t._v("ti benchmark")]),t._v(" to run tests in benchmark mode. This will record\nthe performance of "),a("code",[t._v("ti test")]),t._v(", and save it in "),a("code",[t._v("benchmarks/output")]),t._v(".")]),t._v(" "),a("li",[t._v("Run "),a("code",[t._v("ti regression")]),t._v(" to show the difference between the previous\nresult in "),a("code",[t._v("benchmarks/baseline")]),t._v(". And you can see if the performance\nis increasing or decreasing after your commits. This is really\nhelpful when your work is related to IR optimizations.")]),t._v(" "),a("li",[t._v("Run "),a("code",[t._v("ti baseline")]),t._v(" to save the benchmark result to\n"),a("code",[t._v("benchmarks/baseline")]),t._v(" for future comparison, this may be executed on\nperformance-related PRs, before they are merged into master.")])]),t._v(" "),a("p",[t._v("For example, this is part of the output by "),a("code",[t._v("ti regression")]),t._v(" after\nenabling constant folding optimization pass:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("linalg__________________polar_decomp______________________________\ncodegen_offloaded_tasks                       37 ->    39    +5.4%\ncodegen_statements                          3179 ->  3162    -0.5%\ncodegen_kernel_statements                   2819 ->  2788    -1.1%\ncodegen_evaluator_statements                   0 ->    14    +inf%\n\nlinalg__________________init_matrix_from_vectors__________________\ncodegen_offloaded_tasks                       37 ->    39    +5.4%\ncodegen_statements                          3180 ->  3163    -0.5%\ncodegen_kernel_statements                   2820 ->  2789    -1.1%\ncodegen_evaluator_statements                   0 ->    14    +inf%\n")])])]),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("Currently "),a("code",[t._v("ti benchmark")]),t._v(" only supports benchmarking\nnumber-of-statements, no time benchmarking is included since it depends\non hardware performance and therefore hard to compare if the baseline is\nfrom another machine. We are to purchase a fixed-performance machine as\na time benchmark server at some point. See detailed discussion at "),a("a",{attrs:{href:"https://github.com/taichi-dev/taichi/issues/948",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github Issue #948"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("The suggested workflow for the performance-related PR author to run the\nregression tests is:")]),t._v(" "),a("ul",[a("li",[t._v("Run "),a("code",[t._v("ti benchmark && ti baseline")]),t._v(" in "),a("code",[t._v("master")]),t._v(" to save the current\nperformance as a baseline.")]),t._v(" "),a("li",[t._v("Run "),a("code",[t._v("git checkout -b your-branch-name")]),t._v(".")]),t._v(" "),a("li",[t._v("Do works on the issue, stage 1.")]),t._v(" "),a("li",[t._v("Run "),a("code",[t._v("ti benchmark && ti regression")]),t._v(" to obtain the result.")]),t._v(" "),a("li",[t._v("(If result BAD) Do further improvements, until the result is\nsatisfying.")]),t._v(" "),a("li",[t._v("(If result OK) Run "),a("code",[t._v("ti baseline")]),t._v(" to save stage 1 performance as a\nbaseline.")]),t._v(" "),a("li",[t._v("Go forward to stage 2, 3, ..., and the same workflow is applied.")])]),t._v(" "),a("h2",{attrs:{id:"linux-only-trigger-gdb-when-programs-crash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-only-trigger-gdb-when-programs-crash"}},[t._v("#")]),t._v(" (Linux only) Trigger "),a("code",[t._v("gdb")]),t._v(" when programs crash")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Python")]),t._v("\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_gdb_trigger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C++")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CoreState")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_trigger_gdb_when_crash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Shell")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("TI_GDB_TRIGGER")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[a("strong",[t._v("Quickly pinpointing segmentation faults/assertion failures using")]),t._v(" "),a("code",[t._v("gdb")]),t._v(": When Taichi crashes, "),a("code",[t._v("gdb")]),t._v(" will be triggered and attach to the\ncurrent thread. You might be prompt to enter sudo password required for\ngdb thread attaching. After entering "),a("code",[t._v("gdb")]),t._v(", check the stack backtrace\nwith command "),a("code",[t._v("bt")]),t._v(" ("),a("code",[t._v("backtrace")]),t._v("), then find the line of code triggering\nthe error.")])]),t._v(" "),a("h2",{attrs:{id:"code-coverage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-coverage"}},[t._v("#")]),t._v(" Code coverage")]),t._v(" "),a("p",[t._v("To ensure that our tests covered every situation, we need to have\n"),a("strong",[t._v("coverage report")]),t._v(". That is, to detect how many percents of code lines\nin is executed in test.")]),t._v(" "),a("ul",[a("li",[t._v("Generally, the higher the coverage percentage is, the stronger our\ntests are.")]),t._v(" "),a("li",[t._v("When making a PR, we want to "),a("strong",[t._v("ensure that it comes with\ncorresponding tests")]),t._v(". Or code coverage will decrease.")]),t._v(" "),a("li",[t._v("Code coverage statuses are visible at\n"),a("a",{attrs:{href:"https://codecov.io/gh/taichi-dev/taichi",target:"_blank",rel:"noopener noreferrer"}},[t._v("Codecov"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("Currently, Taichi coverage report is only set up for Python code,\nnot C++ yet.")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ti "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" -C       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run tests and save results to .coverage")]),t._v("\ncoverage report  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate a coverage report on terminal output")]),t._v("\ncoverage html    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate a HTML form report in htmlcov/index.html")]),t._v("\n")])])]),a("h2",{attrs:{id:"interface-system-legacy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface-system-legacy"}},[t._v("#")]),t._v(" Interface system (legacy)")]),t._v(" "),a("p",[t._v("Print all interfaces and units")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_all_units"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"serialization-legacy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serialization-legacy"}},[t._v("#")]),t._v(" Serialization (legacy)")]),t._v(" "),a("p",[t._v("The serialization module of taichi allows you to serialize/deserialize\nobjects into/from binary strings.")]),t._v(" "),a("p",[t._v("You can use "),a("code",[t._v("TI_IO")]),t._v(" macros to explicitly define fields necessary in\nTaichi.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TI_IO_DEF")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Particle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Vector3f position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" velocity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    real mass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    string name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_IO_DEF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" velocity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TI_IO_DECL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Particle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Vector3f position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" velocity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    real mass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" has_name\n    string name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_IO_DECL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_IO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_IO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("velocity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_IO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_IO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("has_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// More flexibility:")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("has_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TI_IO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TI_IO_DEF_VIRT();")]),t._v("\n")])])]),a("h2",{attrs:{id:"progress-notification-legacy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#progress-notification-legacy"}},[t._v("#")]),t._v(" Progress notification (legacy)")]),t._v(" "),a("p",[t._v("The Taichi messenger can send an email to "),a("code",[t._v("$TI_MONITOR_EMAIL")]),t._v(" when the\ntask finishes or crashes. To enable:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" taichi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tools "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" messenger\nmessenger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);