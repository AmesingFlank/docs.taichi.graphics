(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{494:function(_,v,e){"use strict";e.r(v);var t=e(20),r=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"c-代码风格规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-代码风格规范"}},[_._v("#")]),_._v(" C++ 代码风格规范")]),_._v(" "),e("p",[_._v("我们大体上遵循 "),e("a",{attrs:{href:"https://google.github.io/styleguide/cppguide.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("Google C++ 代码风格规范"),e("OutboundLink")],1),_._v("。")]),_._v(" "),e("h2",{attrs:{id:"命名规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名规则"}},[_._v("#")]),_._v(" 命名规则")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("变量名称应当由小写词语通过下划线连接组成，例如 "),e("code",[_._v("llvm_context")]),_._v("。")])]),_._v(" "),e("li",[e("p",[_._v("类和结构体应当由首字母大写的词语组成，例如 "),e("code",[_._v("CodegenLLVM")]),_._v("。")])]),_._v(" "),e("li",[e("p",[_._v("请用由 "),e("code",[_._v("TI")]),_._v(" 开头的形式来命名宏， 例如 "),e("code",[_._v("TI_INFO")]),_._v("，"),e("code",[_._v("TI_IMPLEMENTATION")]),_._v("。")]),_._v(" "),e("ul",[e("li",[_._v("在碰到不可避免的情况以外我们不提倡在代码中使用宏。")])])]),_._v(" "),e("li",[e("p",[_._v("文件名称应当由小写词语通过下划线连接组成，例如 "),e("code",[_._v("ir_printer.cpp")]),_._v("。")])])]),_._v(" "),e("h2",{attrs:{id:"提倡的使用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提倡的使用方法"}},[_._v("#")]),_._v(" 提倡的使用方法")]),_._v(" "),e("ul",[e("li",[_._v("在适当的情况下对局部变量添加 "),e("code",[_._v("auto")]),_._v(" 关键字。")]),_._v(" "),e("li",[_._v("在必要的情况下添加 "),e("code",[_._v("override")]),_._v(" 和 "),e("code",[_._v("const")]),_._v(" 关键字。")])]),_._v(" "),e("h2",{attrs:{id:"不提倡的使用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不提倡的使用方法"}},[_._v("#")]),_._v(" 不提倡的使用方法")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("C语言中的既有范式：")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("printf")]),_._v("（请使用 "),e("code",[_._v("fmtlib::print")]),_._v(" ）。")]),_._v(" "),e("li",[e("code",[_._v("new")]),_._v(" 和 "),e("code",[_._v("free")]),_._v("。 （请使用智能指针，例如 "),e("code",[_._v("std::unique_ptr，std::shared_ptr")]),_._v("，而不是手动管理所有关系）。")]),_._v(" "),e("li",[e("code",[_._v("#include <math.h>")]),_._v(" （请使用 "),e("code",[_._v("#include <cmath>")]),_._v(" ）。")])])]),_._v(" "),e("li",[e("p",[_._v("异常 （我们正在"),e("strong",[_._v("移除")]),_._v(" Taichi 中所有 C++ 异常的使用）。")])]),_._v(" "),e("li",[e("p",[_._v("前缀成员函数，例如 "),e("code",[_._v("m_")]),_._v("，"),e("code",[_._v("_")]),_._v(" 等。")])]),_._v(" "),e("li",[e("p",[_._v("在构造函数和析构函数中调用虚函数。")])]),_._v(" "),e("li",[e("p",[_._v("空指针 "),e("code",[_._v("NULL")]),_._v("（应当使用 "),e("code",[_._v("nullptr")]),_._v(" ）。")])]),_._v(" "),e("li",[e("p",[_._v("在全局环境下使用 "),e("code",[_._v("using namespace std;")]),_._v("。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("typedef")]),_._v("（应当使用 "),e("code",[_._v("using")]),_._v(" ）。")])])]),_._v(" "),e("h2",{attrs:{id:"自动格式化代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动格式化代码"}},[_._v("#")]),_._v(" 自动格式化代码")]),_._v(" "),e("ul",[e("li",[_._v("请运行 "),e("code",[_._v("ti format")])])])])}),[],!1,null,null,null);v.default=r.exports}}]);