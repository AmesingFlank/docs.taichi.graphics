(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{497:function(t,s,n){"use strict";n.r(s);var a=n(20),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"内部设计-wip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部设计-wip"}},[t._v("#")]),t._v(" 内部设计（WIP）")]),t._v(" "),n("h2",{attrs:{id:"中间表示-intermediate-representation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中间表示-intermediate-representation"}},[t._v("#")]),t._v(" 中间表示（Intermediate representation）")]),t._v(" "),n("p",[t._v("使用 "),n("code",[t._v("ti.init(print_ir=True)")]),t._v(" 来将中间表示代码输出到控制台。")]),t._v(" "),n("p",[t._v("查看 "),n("RouterLink",{attrs:{to:"/zh/contribution/compilation.html"}},[t._v("Taichi 内核的生命周期")]),t._v(" 来了解更多关于 Taichi 的 JIT 系统的详细信息。")],1),t._v(" "),n("h2",{attrs:{id:"数据结构组织"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构组织"}},[t._v("#")]),t._v(" 数据结构组织")]),t._v(" "),n("p",[t._v("Taichi 的数据结构的内部组织可能会令人困惑。 区分 "),n("strong",[t._v("容器(containers)")]),t._v("、 "),n("strong",[t._v("单元(cells)")]),t._v("、 和 "),n("strong",[t._v("单元(components)")]),t._v(" 的概念是很重要的。")]),t._v(" "),n("ul",[n("li",[t._v("一个"),n("strong",[t._v("容器(container)")]),t._v(" 可以有多个 "),n("strong",[t._v("单元(cells)")]),t._v("。 我们推荐使用2的幂次方作为"),n("strong",[t._v("单元(cells)")]),t._v(" 的数量。")]),t._v(" "),n("li",[t._v("一个"),n("strong",[t._v("单元(cell)")]),t._v(" 可以有多个"),n("strong",[t._v("组件(components)")]),t._v("。")]),t._v(" "),n("li",[t._v("每个"),n("strong",[t._v("组件(component)"),n("strong",[t._v("都是一个较低级别的 SNode 的一个")]),t._v("容器(container)")]),t._v("。")])]),t._v(" "),n("p",[t._v("请注意， "),n("code",[t._v("place")]),t._v(" SNodes 的容器有单元。 相反，它们直接包含数值。")]),t._v(" "),n("p",[t._v("请考虑下面的示例：")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# misc/listgen_demo.py")]),t._v("\n\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ny "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nz "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nS0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root\nS1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nS2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# S3: x; S4: y")]),t._v("\n\nS5 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# S6: z")]),t._v("\n")])])]),n("ul",[n("li",[t._v("The whole data structure is an "),n("code",[t._v("S0root")]),t._v(" "),n("strong",[t._v("container")]),t._v(", containing\n"),n("ul",[n("li",[n("code",[t._v("1x")]),t._v(" "),n("code",[t._v("S0root")]),t._v(" "),n("strong",[t._v("cell")]),t._v(", which has only one "),n("strong",[t._v("component")]),t._v(", which is\n"),n("ul",[n("li",[t._v("An "),n("code",[t._v("S1pointer")]),t._v(" "),n("strong",[t._v("container")]),t._v(", containing\n"),n("ul",[n("li",[t._v("4x "),n("code",[t._v("S1pointer")]),t._v(" "),n("strong",[t._v("cells")]),t._v(", each with two "),n("strong",[t._v("components")]),t._v(", which are\n"),n("ul",[n("li",[t._v("An "),n("code",[t._v("S2dense")]),t._v(" "),n("strong",[t._v("container")]),t._v(", containing\n"),n("ul",[n("li",[t._v("2x "),n("code",[t._v("S2dense")]),t._v(" "),n("strong",[t._v("cells")]),t._v(", each with two "),n("strong",[t._v("components")]),t._v(", which are\n"),n("ul",[n("li",[t._v("An "),n("code",[t._v("S3place_x")]),t._v(" container which directly contains a "),n("code",[t._v("x: ti.i32")]),t._v(" value")]),t._v(" "),n("li",[t._v("An "),n("code",[t._v("S4place_y")]),t._v(" container which directly contains a "),n("code",[t._v("y: ti.i32")]),t._v(" value")])])])])]),t._v(" "),n("li",[t._v("An "),n("code",[t._v("S5dense")]),t._v(" "),n("strong",[t._v("container")]),t._v(", containing\n"),n("ul",[n("li",[t._v("2x "),n("code",[t._v("S5dense")]),t._v(" "),n("strong",[t._v("cells")]),t._v(", each with one "),n("strong",[t._v("component")]),t._v(", which is\n"),n("ul",[n("li",[t._v("An "),n("code",[t._v("S6place")]),t._v(" container which directly contains a "),n("code",[t._v("z: ti.i32")]),t._v(" value")])])])])])])])])])])])])])]),t._v(" "),n("p",[t._v("The following figure shows the hierarchy of the data structure. The numbers are "),n("code",[t._v("indices")]),t._v(" of the containers and cells.")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/taichi-dev/public_files/fa03e63ca4e161318c8aa9a5db7f4a825604df88/taichi/data_structure_organization.png",alt:"图像"}})]),t._v(" "),n("p",[t._v("Note that the "),n("code",[t._v("S0root")]),t._v(" container and cell do not have an "),n("code",[t._v("index")]),t._v(".")]),t._v(" "),n("p",[t._v("In summary, we will have the following containers:")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("1 S0root")]),t._v(" container")]),t._v(" "),n("li",[n("code",[t._v("1 S1pointer")]),t._v(" container")]),t._v(" "),n("li",[n("code",[t._v("4 S2dense")]),t._v(" containers")]),t._v(" "),n("li",[n("code",[t._v("4 S5dense")]),t._v(" containers")]),t._v(" "),n("li",[n("code",[t._v("8 S3place_x")]),t._v(" containers, each directly contains an "),n("code",[t._v("i32")]),t._v(" value")]),t._v(" "),n("li",[n("code",[t._v("8 S4place_y")]),t._v(" containers, each directly contains an "),n("code",[t._v("i32")]),t._v(" value")]),t._v(" "),n("li",[n("code",[t._v("8 S6place_z")]),t._v(" containers, each directly contains an "),n("code",[t._v("i32")]),t._v(" value")])]),t._v(" "),n("p",[t._v("... and the following cells:")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("1 S0root")]),t._v(" cell")]),t._v(" "),n("li",[n("code",[t._v("4 S1pointer")]),t._v(" cells")]),t._v(" "),n("li",[n("code",[t._v("8 S2dense")]),t._v(" cells")]),t._v(" "),n("li",[n("code",[t._v("8 S5dense")]),t._v(" cells")])]),t._v(" "),n("p",[t._v("Again, note that "),n("code",[t._v("S3place_x, S4place_x, S6place_x")]),t._v(" SNodes do "),n("strong",[t._v("not")]),t._v(" have corresponding cells.")]),t._v(" "),n("p",[t._v("In struct compilers, each SNode has two types: "),n("code",[t._v("container")]),t._v(" type and "),n("code",[t._v("cell")]),t._v(" type. "),n("strong",[t._v("Components")]),t._v(" of a higher level SNode "),n("strong",[t._v("cell")]),t._v(" are "),n("strong",[t._v("containers")]),t._v(" of a lower level SNode.")]),t._v(" "),n("p",[t._v("Note that "),n("strong",[t._v("cells")]),t._v(" are never exposed to end-users.")]),t._v(" "),n("p",[n("strong",[t._v("List generation")]),t._v(" generates lists of SNode "),n("strong",[t._v("containers")]),t._v(" (instead of SNode "),n("strong",[t._v("cells")]),t._v(").")]),t._v(" "),n("div",{staticClass:"custom-block note"},[n("p",{staticClass:"custom-block-title"},[t._v("注解")]),t._v(" "),n("p",[t._v("We are on our way to remove usages of "),n("strong",[t._v("children")]),t._v(", "),n("strong",[t._v("instances")]),t._v(", and "),n("strong",[t._v("elements")]),t._v(" in Taichi. These are very ambiguous terms.")])]),t._v(" "),n("h2",{attrs:{id:"表生成-wip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#表生成-wip"}},[t._v("#")]),t._v(" 表生成 (WIP)")]),t._v(" "),n("p",[t._v("Taichi 中的结构 for 循环会以"),n("strong",[t._v("并行")]),t._v("的方式遍历一个稀疏数据结构中的所有活跃元素。 这把“在稀疏数据结构中均匀分配负载到处理器核心上”这一任务变得十分具有挑战性。具体来说，简单地把一个不规则树分片很容易产生数个叶节点数量严重不均衡的分区。")]),t._v(" "),n("p",[t._v("对此，我们的策略是循序渐进地对于每一层生成（对于该层）活跃的 SNode。 这个表的生成计算将发生在和正常计算内核相同的设备上，并且具体取决于在用户调用 "),n("code",[t._v("ti.init")]),t._v(" 函数时所提供的 "),n("code",[t._v("arch")]),t._v(" 参数。")]),t._v(" "),n("p",[t._v("表的生成将会把数据结构的叶节点展平成一维的稠密数组，并因此规避不完整树的不规则性。 然后，我们就可以直接在表上调用一个正常的"),n("strong",[t._v("并行 for")]),t._v(" 循环。")]),t._v(" "),n("p",[t._v("例如，")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# misc/listgen_demo.py")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" taichi "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" ti\n\nti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("print_ir"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nS0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root\nS1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bitmasked"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("kernel")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nfunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("以上的代码会生成下面的中间表示（IR）")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$0 = offloaded clear_list S1dense\n$1 = offloaded listgen S0root->S1dense\n$2 = offloaded clear_list S2bitmasked\n$3 = offloaded listgen S1dense->S2bitmasked\n$4 = offloaded struct_for(S2bitmasked) block_dim=0 {\n  <i32 x1> $5 = loop index 0\n  print i, $5\n}\n")])])]),n("p",[t._v("请注意， "),n("code",[t._v("func")]),t._v(" 的使用会生成以下两个表：")]),t._v(" "),n("ul",[n("li",[t._v("（任务 "),n("code",[t._v("$0")]),t._v(" 和 "),n("code",[t._v("$1")]),t._v("）基于 "),n("code",[t._v("root")]),t._v(" 节点 （"),n("code",[t._v("S0")]),t._v("）的表会生成一个关于 "),n("code",[t._v("dense")]),t._v(" 节点们（"),n("code",[t._v("S1")]),t._v("）的表；")]),t._v(" "),n("li",[t._v("（任务 "),n("code",[t._v("$2")]),t._v(" 和 "),n("code",[t._v("$3")]),t._v("）基于 "),n("code",[t._v("dense")]),t._v(" 节点们（"),n("code",[t._v("S1")]),t._v("）的表会生成一个关于 "),n("code",[t._v("bitmasked")]),t._v(" 节点们（"),n("code",[t._v("S2")]),t._v("）的表。")])]),t._v(" "),n("p",[t._v("关于 "),n("code",[t._v("root")]),t._v(" 节点的表总会有且仅有一个元素（实例），所以我们永远不会去清空或者重新生成这个表。")]),t._v(" "),n("div",{staticClass:"custom-block note"},[n("p",{staticClass:"custom-block-title"},[t._v("注解")]),t._v(" "),n("p",[t._v("关于 "),n("code",[t._v("place")]),t._v(" （叶）节点的表 （比如说，在这个例子里它是 "),n("code",[t._v("S3")]),t._v(")，永远不会被生成。 相反，我们可以遍历关于这些节点的父节点们的表，并且于每个父节点，我们（在不生成额外的表的情况下）直接遍历所有 "),n("code",[t._v("place")]),t._v("节点。")]),t._v(" "),n("p",[t._v("这种设计的初衷是去平摊生成表所带来的额外开销。 因为去对于每个叶节点（"),n("code",[t._v("place")]),t._v(" SNode）生成一个表元素会带来过多的开销，并且这些开销极有可能大大超过在叶元素本身上进行的必要的计算。 所以，我们选择只生成和这些叶节点的父节点相关的的元素表，这样就能把生成表所带来的开销平摊到多个倒数第二层的 SNode 元素的子元素上。")]),t._v(" "),n("p",[t._v("在上面的例子中，虽然我们有 "),n("code",[t._v("16")]),t._v(" 个关于 "),n("code",[t._v("x")]),t._v(" 的实例，但是我们只生成了 "),n("code",[t._v("4")]),t._v(" 个 "),n("code",[t._v("bitmasked")]),t._v(" 节点（和 "),n("code",[t._v("1")]),t._v(" 个 "),n("code",[t._v("dense")]),t._v(" 节点）。")])]),t._v(" "),n("h2",{attrs:{id:"统计量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#统计量"}},[t._v("#")]),t._v(" 统计量")]),t._v(" "),n("p",[t._v("在某些情况下，在 Taichi 程序的执行过程中，收集关于内部事件的特定的量化信息是很用帮助的。 "),n("code",[t._v("Statistics")]),t._v(" 类就是为此设计的。")]),t._v(" "),n("p",[t._v("用法：")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"taichi/util/statistics.h"')])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 将 1.0 加到计数器 "codegen_offloaded_tasks"')]),t._v("\ntaichi"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"codegen_offloaded_tasks"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 将“中间表示”中语句的数量加到计数器 "codegen_statements"')]),t._v("\ntaichi"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"codegen_statements"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" irpass"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("analysis"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("count_statements")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("注意键为 "),n("code",[t._v("std::string")]),t._v(" 而值类型为 "),n("code",[t._v("double")]),t._v("。")]),t._v(" "),n("p",[t._v("在 Python 中使用如下方式来打印出所有的统计量：")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_stat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"为什么使用-python-作为前端语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-python-作为前端语言"}},[t._v("#")]),t._v(" 为什么使用 Python 作为前端语言")]),t._v(" "),n("p",[t._v("将 Taichi 嵌入到 "),n("code",[t._v("Python")]),t._v(" 中有以下优点：")]),t._v(" "),n("ul",[n("li",[t._v("易于学习。 Taichi 的语法与 Python 非常相似。")]),t._v(" "),n("li",[t._v("易于运行。 不需要运行前编译（ahead-of-time compilation）。")]),t._v(" "),n("li",[t._v("这样的设计使用户可以重复利用已有的 Python 基础架构：\n"),n("ul",[n("li",[t._v("集成开发环境（IDEs）。 大部分 Python 的集成开发环境提供的语法高亮，语法检查和自动补全功能可以用于 Taichi。")]),t._v(" "),n("li",[t._v("包管理器（pip）。 开发好的 Taichi 程序可以被简单地提交至 "),n("code",[t._v("PyPI")]),t._v(" 并且其他用户可以轻松地使用 "),n("code",[t._v("pip")]),t._v(" 安装它。")]),t._v(" "),n("li",[t._v("现有的包。 用户可以很轻松地与其他 Python 组件（例如 "),n("code",[t._v("matplotlib")]),t._v(" 和 "),n("code",[t._v("numpy")]),t._v("）交互。")])])]),t._v(" "),n("li",[t._v("只要内核主体可以被 Python 的解析器解析，那么 "),n("code",[t._v("Python")]),t._v(" 内置的处理抽象语法树（AST）的工具让我们可以做一些奇妙的事情。")])]),t._v(" "),n("p",[t._v("但是，这样的设计同样存在一些不足之处：")]),t._v(" "),n("ul",[n("li",[t._v("Taichi 内核必须能被 Python 解析器解析。 这意味着 Taichi 的语法不能超出 Python 的语法范畴。\n"),n("ul",[n("li",[t._v("例如，访问 Taichi 场时，即使场是 0 维度也必须使用索引来访问其元素。 如果 "),n("code",[t._v("x")]),t._v(" 是 0 维的，需要使用 "),n("code",[t._v("x[None] = 123")]),t._v(" 来给 "),n("code",[t._v("x")]),t._v(" 中的量赋值。 这是因为在 Python 语法中， "),n("code",[t._v("x = 123")]),t._v(" 将会将 "),n("code",[t._v("x")]),t._v(" 本身（而不是它包含的值）设为常数 "),n("code",[t._v("123")]),t._v("，不幸的是，我们无法更改这种行为。")])])]),t._v(" "),n("li",[t._v("Python 的性能相对较为低下。 这在使用纯 Python 脚本初始化较大 Taichi 场时会导致一些性能问题。 初始化较大的场时必须使用 Taichi 内核。")])]),t._v(" "),n("h2",{attrs:{id:"virtual-indices-v-s-physical-indices"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#virtual-indices-v-s-physical-indices"}},[t._v("#")]),t._v(" Virtual indices v.s. physical indices")]),t._v(" "),n("p",[t._v("In Taichi, "),n("em",[t._v("virtual indices")]),t._v(" are used to locate elements in fields, and "),n("em",[t._v("physical indices")]),t._v(" are used to specify data layouts in memory.")]),t._v(" "),n("p",[t._v("For example,")]),t._v(" "),n("ul",[n("li",[t._v("In "),n("code",[t._v("a[i, j, k]")]),t._v(", "),n("code",[t._v("i")]),t._v(", "),n("code",[t._v("j")]),t._v(", and "),n("code",[t._v("k")]),t._v(" are "),n("strong",[t._v("virtual")]),t._v(" indices.")]),t._v(" "),n("li",[t._v("In "),n("code",[t._v("for i, j in x:")]),t._v(", "),n("code",[t._v("i")]),t._v(" and "),n("code",[t._v("j")]),t._v(" are "),n("strong",[t._v("virtual")]),t._v(" indices.")]),t._v(" "),n("li",[n("code",[t._v("ti.i, ti.j, ti.k, ti.l, ...")]),t._v(" are "),n("strong",[t._v("physical")]),t._v(" indices.")]),t._v(" "),n("li",[t._v("In struct-for statements, "),n("code",[t._v("LoopIndexStmt::index")]),t._v(" is a "),n("strong",[t._v("physical")]),t._v(" index.")])]),t._v(" "),n("p",[t._v("The mapping between virtual indices and physical indices for each "),n("code",[t._v("SNode")]),t._v(" is stored in "),n("code",[t._v("SNode::physical_index_position")]),t._v(". I.e., "),n("code",[t._v("physical_index_position[i]")]),t._v(" answers the question: "),n("strong",[t._v("which physical index does the i-th virtual index")]),t._v(" correspond to?")]),t._v(" "),n("p",[t._v("Each "),n("code",[t._v("SNode")]),t._v(" can have a different virtual-to-physical mapping. "),n("code",[t._v("physical_index_position[i] == -1")]),t._v(" means the "),n("code",[t._v("i")]),t._v("-th virtual index does not corrspond to any physical index in this "),n("code",[t._v("SNode")]),t._v(".")]),t._v(" "),n("p",[n("code",[t._v("SNode")]),t._v(" s in handy dense fields (i.e., "),n("code",[t._v("a = ti.field(ti.i32, shape=(128, 256, 512))")]),t._v(") have "),n("strong",[t._v("trivial")]),t._v(" virtual-to-physical mapping, e.g. "),n("code",[t._v("physical_index_position[i] = i")]),t._v(".")]),t._v(" "),n("p",[t._v("However, more complex data layouts, such as column-major 2D fields can lead to "),n("code",[t._v("SNodes")]),t._v(" with "),n("code",[t._v("physical_index_position[0] = 1")]),t._v(" and "),n("code",[t._v("physical_index_position[1] = 0")]),t._v(".")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shape"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nb "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nti"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_runtime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("materialize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmapping_a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("physical_index_position"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" mapping_a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nmapping_b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("physical_index_position"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" mapping_b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Note that b is column-major:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the virtual first index exposed to the user comes second in memory layout.")]),t._v("\n")])])]),n("p",[t._v("Taichi supports up to 8 ("),n("code",[t._v("constexpr int taichi_max_num_indices = 8")]),t._v(") virtual indices and physical indices.")])])}),[],!1,null,null,null);s.default=e.exports}}]);