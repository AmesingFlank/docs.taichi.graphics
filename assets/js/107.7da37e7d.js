(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{514:function(t,e,a){"use strict";a.r(e);var n=a(20),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"gui-system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gui-system"}},[t._v("#")]),t._v(" GUI system")]),t._v(" "),a("p",[t._v("Taichi has a built-in GUI system to help users visualize results.")]),t._v(" "),a("h2",{attrs:{id:"create-a-window"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-window"}},[t._v("#")]),t._v(" Create a window")]),t._v(" "),a("p",[t._v("::: {.function}\nti.GUI(title = 'Taichi', res = (512, 512), background_color =\n0x000000, show_gui = True)")]),t._v(" "),a("p",[t._v("parameter title")]),t._v(" "),a("p",[t._v(": (optional, string) the window title")]),t._v(" "),a("p",[t._v("parameter res")]),t._v(" "),a("p",[t._v(": (optional, scalar or tuple) resolution / size of the window")]),t._v(" "),a("p",[t._v("parameter background_color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex) background color of the window")]),t._v(" "),a("p",[t._v("parameter show_gui")]),t._v(" "),a("p",[t._v(": (optional, bool) see the note below")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (GUI) an object represents the window")]),t._v(" "),a("p",[t._v("Create a window. If "),a("code",[t._v("res")]),t._v(" is scalar, then width will be equal to height.")]),t._v(" "),a("p",[t._v("The following code creates a window of resolution "),a("code",[t._v("640x360")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("gui "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Window Title'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("640")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("360")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("::: ti NOTE")]),t._v(" "),a("p",[t._v("If you are running Taichi on a machine without a GUI environment,\nconsider setting "),a("code",[t._v("show_gui")]),t._v(" to "),a("code",[t._v("False")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("gui "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Window Title'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("640")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("360")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" show_gui"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" gui"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("running"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    gui"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("show"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("gui"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token format-spec"}},[t._v("06d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(".png'")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# save a series of screenshot")]),t._v("\n")])])]),a("p",[t._v(":::\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.show(filename = None)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter filename")]),t._v(" "),a("p",[t._v(": (optional, string) see notes below")]),t._v(" "),a("p",[t._v("Show the window on the screen.")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("注解")]),t._v(" "),a("p",[t._v("If "),a("code",[t._v("filename")]),t._v(" is specified, a screenshot will be saved to the file\nspecified by the name. For example, the following saves frames of the\nwindow to "),a("code",[t._v(".png")]),t._v("'s:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("for frame in range(10000):\n    render(img)\n    gui.set_image(img)\n    gui.show(f'{frame:06d}.png')\n")])])])]),t._v(" "),a("p",[t._v(":::")]),t._v(" "),a("h2",{attrs:{id:"paint-on-a-window"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paint-on-a-window"}},[t._v("#")]),t._v(" Paint on a window")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.set_image(img)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter img")]),t._v(" "),a("p",[t._v(": (np.array or ti.field) field containing the image, see notes below")]),t._v(" "),a("p",[t._v("Set an image to display on the window.")]),t._v(" "),a("p",[t._v("The image pixels are set from the values of "),a("code",[t._v("img[i, j]")]),t._v(", where "),a("code",[t._v("i")]),t._v("\nindicates the horizontal coordinates (from left to right) and "),a("code",[t._v("j")]),t._v(" the\nvertical coordinates (from bottom to top).")]),t._v(" "),a("p",[t._v("If the window size is "),a("code",[t._v("(x, y)")]),t._v(", then "),a("code",[t._v("img")]),t._v(" must be one of:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ti.field(shape=(x, y))")]),t._v(", a grey-scale image")]),t._v(" "),a("li",[a("code",[t._v("ti.field(shape=(x, y, 3))")]),t._v(", where [3]{.title-ref} is for\n"),a("code",[t._v("(r, g, b)")]),t._v(" channels")]),t._v(" "),a("li",[a("code",[t._v("ti.field(shape=(x, y, 2))")]),t._v(", where [2]{.title-ref} is for "),a("code",[t._v("(r, g)")]),t._v("\nchannels")]),t._v(" "),a("li",[a("code",[t._v("ti.Vector.field(3, shape=(x, y))")]),t._v(" "),a("code",[t._v("(r, g, b)")]),t._v(" channels on each\ncomponent (see "),a("code",[t._v("vector")]),t._v('{.interpreted-text role="ref"})')]),t._v(" "),a("li",[a("code",[t._v("ti.Vector.field(2, shape=(x, y))")]),t._v(" "),a("code",[t._v("(r, g)")]),t._v(" channels on each\ncomponent")]),t._v(" "),a("li",[a("code",[t._v("np.ndarray(shape=(x, y))")])]),t._v(" "),a("li",[a("code",[t._v("np.ndarray(shape=(x, y, 3))")])]),t._v(" "),a("li",[a("code",[t._v("np.ndarray(shape=(x, y, 2))")])])]),t._v(" "),a("p",[t._v("The data type of "),a("code",[t._v("img")]),t._v(" must be one of:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("uint8")]),t._v(", range "),a("code",[t._v("[0, 255]")])]),t._v(" "),a("li",[a("code",[t._v("uint16")]),t._v(", range "),a("code",[t._v("[0, 65535]")])]),t._v(" "),a("li",[a("code",[t._v("uint32")]),t._v(", range "),a("code",[t._v("[0, 4294967295]")])]),t._v(" "),a("li",[a("code",[t._v("float32")]),t._v(", range "),a("code",[t._v("[0, 1]")])]),t._v(" "),a("li",[a("code",[t._v("float64")]),t._v(", range "),a("code",[t._v("[0, 1]")]),t._v("\n:::")])]),t._v(" "),a("p",[t._v("::: {.function}\ngui.get_image()")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (np.array) the current image shown on the GUI")]),t._v(" "),a("p",[t._v("Get the 4-channel (RGBA) image shown in the current GUI system.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.circle(pos, color = 0xFFFFFF, radius = 1)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter pos")]),t._v(" "),a("p",[t._v(": (tuple of 2) the position of the circle")]),t._v(" "),a("p",[t._v("parameter color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex) the color to fill the circle")]),t._v(" "),a("p",[t._v("parameter radius")]),t._v(" "),a("p",[t._v(": (optional, scalar) the radius of the circle")]),t._v(" "),a("p",[t._v("Draw a solid circle.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.circles(pos, color = 0xFFFFFF, radius = 1)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter pos")]),t._v(" "),a("p",[t._v(": (np.array) the positions of the circles")]),t._v(" "),a("p",[t._v("parameter color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex or np.array of uint32) the color(s) to fill the\ncircles")]),t._v(" "),a("p",[t._v("parameter radius")]),t._v(" "),a("p",[t._v(": (optional, scalar or np.array of float32) the radius (radii) of the\ncircles")]),t._v(" "),a("p",[t._v("Draw solid circles.\n:::")]),t._v(" "),a("p",[t._v("::: ti NOTE\nIf "),a("code",[t._v("color")]),t._v(" is a numpy array, the circle at "),a("code",[t._v("pos[i]")]),t._v(" will be colored with\n"),a("code",[t._v("color[i]")]),t._v(". In this case, "),a("code",[t._v("color")]),t._v(" must have the same size as "),a("code",[t._v("pos")]),t._v(".\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.line(begin, end, color = 0xFFFFFF, radius = 1)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter begin")]),t._v(" "),a("p",[t._v(": (tuple of 2) the first end point position of line")]),t._v(" "),a("p",[t._v("parameter end")]),t._v(" "),a("p",[t._v(": (tuple of 2) the second end point position of line")]),t._v(" "),a("p",[t._v("parameter color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex) the color of line")]),t._v(" "),a("p",[t._v("parameter radius")]),t._v(" "),a("p",[t._v(": (optional, scalar) the width of line")]),t._v(" "),a("p",[t._v("Draw a line.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.lines(begin, end, color = 0xFFFFFF, radius = 1)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter begin")]),t._v(" "),a("p",[t._v(": (np.array) the positions of the first end point of lines")]),t._v(" "),a("p",[t._v("parameter end")]),t._v(" "),a("p",[t._v(": (np.array) the positions of the second end point of lines")]),t._v(" "),a("p",[t._v("parameter color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex or np.array of uint32) the color(s) of lines")]),t._v(" "),a("p",[t._v("parameter radius")]),t._v(" "),a("p",[t._v(": (optional, scalar or np.array of float32) the width(s) of the lines")]),t._v(" "),a("p",[t._v("Draw lines.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.triangle(a, b, c, color = 0xFFFFFF)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter a")]),t._v(" "),a("p",[t._v(": (tuple of 2) the first end point position of triangle")]),t._v(" "),a("p",[t._v("parameter b")]),t._v(" "),a("p",[t._v(": (tuple of 2) the second end point position of triangle")]),t._v(" "),a("p",[t._v("parameter c")]),t._v(" "),a("p",[t._v(": (tuple of 2) the third end point position of triangle")]),t._v(" "),a("p",[t._v("parameter color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex) the color to fill the triangle")]),t._v(" "),a("p",[t._v("Draw a solid triangle.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.triangles(a, b, c, color = 0xFFFFFF)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter a")]),t._v(" "),a("p",[t._v(": (np.array) the positions of the first end point of triangles")]),t._v(" "),a("p",[t._v("parameter b")]),t._v(" "),a("p",[t._v(": (np.array) the positions of the second end point of triangles")]),t._v(" "),a("p",[t._v("parameter c")]),t._v(" "),a("p",[t._v(": (np.array) the positions of the third end point of triangles")]),t._v(" "),a("p",[t._v("parameter color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex or np.array of uint32) the color(s) to fill the\ntriangles")]),t._v(" "),a("p",[t._v("Draw solid triangles.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.rect(topleft, bottomright, radius = 1, color = 0xFFFFFF)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter topleft")]),t._v(" "),a("p",[t._v(": (tuple of 2) the top-left point position of rectangle")]),t._v(" "),a("p",[t._v("parameter bottomright")]),t._v(" "),a("p",[t._v(": (tuple of 2) the bottom-right point position of rectangle")]),t._v(" "),a("p",[t._v("parameter color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex) the color of stroke line")]),t._v(" "),a("p",[t._v("parameter radius")]),t._v(" "),a("p",[t._v(": (optional, scalar) the width of stroke line")]),t._v(" "),a("p",[t._v("Draw a hollow rectangle.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.text(content, pos, font_size = 15, color = 0xFFFFFF)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI) the window object")]),t._v(" "),a("p",[t._v("parameter content")]),t._v(" "),a("p",[t._v(": (str) the text to draw")]),t._v(" "),a("p",[t._v("parameter pos")]),t._v(" "),a("p",[t._v(": (tuple of 2) the top-left point position of the fonts / texts")]),t._v(" "),a("p",[t._v("parameter font_size")]),t._v(" "),a("p",[t._v(": (optional, scalar) the size of font (in height)")]),t._v(" "),a("p",[t._v("parameter color")]),t._v(" "),a("p",[t._v(": (optional, RGB hex) the foreground color of text")]),t._v(" "),a("p",[t._v("Draw a line of text on screen.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\nti.rgb_to_hex(rgb):")]),t._v(" "),a("p",[t._v("parameter rgb")]),t._v(" "),a("p",[t._v(": (tuple of 3 floats) The (R, G, B) float values, in range [0, 1]")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (RGB hex or np.array of uint32) The converted hex value")]),t._v(" "),a("p",[t._v("Convert a (R, G, B) tuple of floats into a single integer value. E.g.,")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("rgb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hex")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rgb_to_hex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rgb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0x66ccff")]),t._v("\n\nrgb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hex")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rgb_to_hex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rgb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# np.array([0x66ccff, 0x007fff])")]),t._v("\n")])])]),a("p",[t._v("The return values can be used in GUI drawing APIs.\n:::")]),t._v(" "),a("h2",{attrs:{id:"event-processing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-processing"}},[t._v("#")]),t._v(" Event processing")]),t._v(" "),a("p",[t._v("Every event have a key and type.")]),t._v(" "),a("p",[a("em",[t._v("Event type")]),t._v(" is the type of event, for now, there are just three type of\nevent:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("ti.GUI.RELEASE  # key up or mouse button up\nti.GUI.PRESS    # key down or mouse button down\nti.GUI.MOTION   # mouse motion or mouse wheel\n")])])]),a("p",[a("em",[t._v("Event key")]),t._v(" is the key that you pressed on keyboard or mouse, can be one\nof:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("# for ti.GUI.PRESS and ti.GUI.RELEASE event:\nti.GUI.ESCAPE  # Esc\nti.GUI.SHIFT   # Shift\nti.GUI.LEFT    # Left Arrow\n'a'            # we use lowercase for alphabet\n'b'\n...\nti.GUI.LMB     # Left Mouse Button\nti.GUI.RMB     # Right Mouse Button\n\n# for ti.GUI.MOTION event:\nti.GUI.MOVE    # Mouse Moved\nti.GUI.WHEEL   # Mouse Wheel Scrolling\n")])])]),a("p",[t._v("A "),a("em",[t._v("event filter")]),t._v(" is a list combined of "),a("em",[t._v("key")]),t._v(", "),a("em",[t._v("type")]),t._v(" and "),a("em",[t._v("(type, key)")]),t._v("\ntuple, e.g.:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if ESC pressed or released:")]),t._v("\ngui"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ESCAPE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if any key is pressed:")]),t._v("\ngui"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PRESS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if ESC pressed or SPACE released:")]),t._v("\ngui"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PRESS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ESCAPE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RELEASE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SPACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("::: {.attribute}\ngui.running")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI)")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (bool) "),a("code",[t._v("True")]),t._v(" if "),a("code",[t._v("ti.GUI.EXIT")]),t._v(" event occurred, vice versa")]),t._v(" "),a("p",[a("code",[t._v("ti.GUI.EXIT")]),t._v(" occurs when you click on the close (X) button of a window.\nSo "),a("code",[t._v("gui.running")]),t._v(" will obtain "),a("code",[t._v("False")]),t._v(" when the GUI is being closed.")]),t._v(" "),a("p",[t._v("For example, loop until the close button is clicked:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("while gui.running:\n    render()\n    gui.set_image(pixels)\n    gui.show()\n")])])]),a("p",[t._v("You can also close the window by manually setting "),a("code",[t._v("gui.running")]),t._v(" to\n"),a("code",[t._v("False")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("while gui.running:\n    if gui.get_event(ti.GUI.ESCAPE):\n        gui.running = False\n\n    render()\n    gui.set_image(pixels)\n    gui.show()\n")])])]),a("p",[t._v(":::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.get_event(a, ...)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI)")]),t._v(" "),a("p",[t._v("parameter a")]),t._v(" "),a("p",[t._v(": (optional, EventFilter) filter out matched events")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (bool) "),a("code",[t._v("False")]),t._v(" if there is no pending event, vise versa")]),t._v(" "),a("p",[t._v("Try to pop a event from the queue, and store it in "),a("code",[t._v("gui.event")]),t._v(".")]),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("if gui.get_event():\n    print('Got event, key =', gui.event.key)\n")])])]),a("p",[t._v("For example, loop until ESC is pressed:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("gui = ti.GUI('Title', (640, 480))\nwhile not gui.get_event(ti.GUI.ESCAPE):\n    gui.set_image(img)\n    gui.show()\n")])])]),a("p",[t._v(":::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.get_events(a, ...)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI)")]),t._v(" "),a("p",[t._v("parameter a")]),t._v(" "),a("p",[t._v(": (optional, EventFilter) filter out matched events")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (generator) a python generator, see below")]),t._v(" "),a("p",[t._v("Basically the same as "),a("code",[t._v("gui.get_event")]),t._v(", except for this one returns a\ngenerator of events instead of storing into "),a("code",[t._v("gui.event")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("for e in gui.get_events():\n    if e.key == ti.GUI.ESCAPE:\n        exit()\n    elif e.key == ti.GUI.SPACE:\n        do_something()\n    elif e.key in ['a', ti.GUI.LEFT]:\n        ...\n")])])]),a("p",[t._v(":::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.is_pressed(key, ...)")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI)")]),t._v(" "),a("p",[t._v("parameter key")]),t._v(" "),a("p",[t._v(": (EventKey) keys you want to detect")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (bool) "),a("code",[t._v("True")]),t._v(" if one of the keys pressed, vice versa")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("Must be used together with "),a("code",[t._v("gui.get_event")]),t._v(", or it won't be updated! For\nexample:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("while True:\n    gui.get_event()  # must be called before is_pressed\n    if gui.is_pressed('a', ti.GUI.LEFT):\n        print('Go left!')\n    elif gui.is_pressed('d', ti.GUI.RIGHT):\n        print('Go right!')\n")])])])]),t._v(" "),a("p",[t._v(":::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.get_cursor_pos()")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI)")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (tuple of 2) current cursor position within the window")]),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("mouse_x, mouse_y = gui.get_cursor_pos()\n")])])]),a("p",[t._v(":::")]),t._v(" "),a("p",[t._v("::: {.attribute}\ngui.fps_limit")]),t._v(" "),a("p",[t._v("parameter gui")]),t._v(" "),a("p",[t._v(": (GUI)")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (scalar or None) the maximum FPS, "),a("code",[t._v("None")]),t._v(" for no limit")]),t._v(" "),a("p",[t._v("The default value is 60.")]),t._v(" "),a("p",[t._v("For example, to restrict FPS to be below 24, simply\n"),a("code",[t._v("gui.fps_limit = 24")]),t._v(". This helps reduce the overload on your hardware\nespecially when you're using OpenGL on your intergrated GPU which could\nmake desktop slow to response.\n:::")]),t._v(" "),a("h2",{attrs:{id:"gui-widgets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gui-widgets"}},[t._v("#")]),t._v(" GUI Widgets")]),t._v(" "),a("p",[t._v("Sometimes it's more intuitive to use widgets like slider, button to\ncontrol program variables instead of chaotic keyboard bindings. Taichi\nGUI provides a set of widgets that hopefully could make variable control\nmore intuitive:")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.slider(text, minimum, maximum, step=1)")]),t._v(" "),a("p",[t._v("parameter text")]),t._v(" "),a("p",[t._v(": (str) the text to be displayed above this slider.")]),t._v(" "),a("p",[t._v("parameter minumum")]),t._v(" "),a("p",[t._v(": (float) the minimum value of the slider value.")]),t._v(" "),a("p",[t._v("parameter maxumum")]),t._v(" "),a("p",[t._v(": (float) the maximum value of the slider value.")]),t._v(" "),a("p",[t._v("parameter step")]),t._v(" "),a("p",[t._v(": (optional, float) the step between two separate value.")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (WidgetValue) a value getter / setter, see\n"),a("code",[t._v("WidgetValue")]),t._v('{.interpreted-text role="class"}.')]),t._v(" "),a("p",[t._v("The widget will be display as: "),a("code",[t._v("{text}: {value:.3f}")]),t._v(", followed with a\nslider.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.label(text)")]),t._v(" "),a("p",[t._v("parameter text")]),t._v(" "),a("p",[t._v(": (str) the text to be displayed in the label.")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (WidgetValue) a value getter / setter, see\n"),a("code",[t._v("WidgetValue")]),t._v('{.interpreted-text role="class"}.')]),t._v(" "),a("p",[t._v("The widget will be display as: "),a("code",[t._v("{text}: {value:.3f}")]),t._v(".\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\ngui.button(text, event_name=None)")]),t._v(" "),a("p",[t._v("parameter text")]),t._v(" "),a("p",[t._v(": (str) the text to be displayed in the button.")]),t._v(" "),a("p",[t._v("parameter event_name")]),t._v(" "),a("p",[t._v(": (optional, str) customize the event name.")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (EventKey) the event key for this button, see\n"),a("code",[t._v("gui_event")]),t._v('{.interpreted-text role="ref"}.\n:::')]),t._v(" "),a("p",[t._v("::: {.WidgetValue}\nA getter / setter for widget values.")]),t._v(" "),a("p",[t._v("::: {.attribute}\nvalue")]),t._v(" "),a("p",[t._v("Get / set the current value in the widget where we're returned from.\n:::")]),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("radius = gui.slider('Radius', 1, 50)\n\nwhile gui.running:\n    print('The radius now is', radius.value)\n    ...\n    radius.value += 0.01\n    ...\n    gui.show()\n")])])]),a("p",[t._v(":::")]),t._v(" "),a("h2",{attrs:{id:"image-i-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image-i-o"}},[t._v("#")]),t._v(" Image I/O")]),t._v(" "),a("p",[t._v("::: {.function}\nti.imwrite(img, filename)")]),t._v(" "),a("p",[t._v("parameter img")]),t._v(" "),a("p",[t._v(": (ti.Vector.field or ti.field) the image you want to export")]),t._v(" "),a("p",[t._v("parameter filename")]),t._v(" "),a("p",[t._v(": (string) the location you want to save to")]),t._v(" "),a("p",[t._v("Export a "),a("code",[t._v("np.ndarray")]),t._v(" or Taichi field ("),a("code",[t._v("ti.Matrix.field")]),t._v(",\n"),a("code",[t._v("ti.Vector.field")]),t._v(", or "),a("code",[t._v("ti.field")]),t._v(") to a specified location "),a("code",[t._v("filename")]),t._v(".")]),t._v(" "),a("p",[t._v("Same as "),a("code",[t._v("ti.GUI.show(filename)")]),t._v(", the format of the exported image is\ndetermined by "),a("strong",[t._v("the suffix of")]),t._v(" "),a("code",[t._v("filename")]),t._v(" as well. Now "),a("code",[t._v("ti.imwrite")]),t._v("\nsupports exporting images to "),a("code",[t._v("png")]),t._v(", "),a("code",[t._v("img")]),t._v(" and "),a("code",[t._v("jpg")]),t._v(" and we recommend\nusing "),a("code",[t._v("png")]),t._v(".")]),t._v(" "),a("p",[t._v("Please make sure that the input image has "),a("strong",[t._v("a valid shape")]),t._v(". If you want\nto export a grayscale image, the input shape of field should be\n"),a("code",[t._v("(height, weight)")]),t._v(" or "),a("code",[t._v("(height, weight, 1)")]),t._v(". For example:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" taichi "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" ti\n\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nshape "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("u8\npixels "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dtype"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shape"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("shape"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("kernel")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" pixels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        pixels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# integars between [0, 255] for ti.u8")]),t._v("\n\ndraw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("imwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pixels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"export_u8.png"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Besides, for RGB or RGBA images, "),a("code",[t._v("ti.imwrite")]),t._v(" needs to receive a field\nwhich has shape "),a("code",[t._v("(height, width, 3)")]),t._v(" and "),a("code",[t._v("(height, width, 4)")]),t._v("\nindividually.")]),t._v(" "),a("p",[t._v("Generally the value of the pixels on each channel of a "),a("code",[t._v("png")]),t._v(" image is an\nintegar in [0, 255]. For this reason, "),a("code",[t._v("ti.imwrite")]),t._v(" will "),a("strong",[t._v("cast\nfields")]),t._v(" which has different datatypes all "),a("strong",[t._v("into integars between [0,\n255]")]),t._v(". As a result, "),a("code",[t._v("ti.imwrite")]),t._v(" has the following requirements for\ndifferent datatypes of input fields:")]),t._v(" "),a("ul",[a("li",[t._v("For float-type ("),a("code",[t._v("ti.f16")]),t._v(", "),a("code",[t._v("ti.f32")]),t._v(", etc) input fields, "),a("strong",[t._v("the value\nof each pixel should be float between [0.0, 1.0]")]),t._v(". Otherwise\n"),a("code",[t._v("ti.imwrite")]),t._v(" will first clip them into [0.0, 1.0]. Then they are\nmultiplied by 256 and casted to integaters ranging from [0, 255].")]),t._v(" "),a("li",[t._v("For int-type ("),a("code",[t._v("ti.u8")]),t._v(", "),a("code",[t._v("ti.u16")]),t._v(", etc) input fields, "),a("strong",[t._v("the value of\neach pixel can be any valid integer in its own bounds")]),t._v(". These\nintegers in this field will be scaled to [0, 255] by being divided\nover the upper bound of its basic type accordingly.")])]),t._v(" "),a("p",[t._v("Here is another example:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" taichi "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" ti\n\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nshape "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nchannels "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f32\npixels "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Matrix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dtype"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shape"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("shape"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("kernel")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" pixels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("static"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            pixels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# floats between [0, 1] for ti.f32")]),t._v("\n\ndraw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nti"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("imwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pixels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"export_f32.png"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v(":::")]),t._v(" "),a("p",[t._v("::: {.function}\nti.imread(filename, channels=0)")]),t._v(" "),a("p",[t._v("parameter filename")]),t._v(" "),a("p",[t._v(": (string) the filename of the image to load")]),t._v(" "),a("p",[t._v("parameter channels")]),t._v(" "),a("p",[t._v(": (optional int) the number of channels in your specified image. The\ndefault value "),a("code",[t._v("0")]),t._v(" means the channels of the returned image is\nadaptive to the image file")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (np.ndarray) the image read from "),a("code",[t._v("filename")])]),t._v(" "),a("p",[t._v("This function loads an image from the target filename and returns it as\na "),a("code",[t._v("np.ndarray(dtype=np.uint8)")]),t._v(".")]),t._v(" "),a("p",[t._v("Each value in this returned field is an integer in [0, 255].\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\nti.imshow(img, windname)")]),t._v(" "),a("p",[t._v("parameter img")]),t._v(" "),a("p",[t._v(": (ti.Vector.field or ti.field) the image to show in the GUI")]),t._v(" "),a("p",[t._v("parameter windname")]),t._v(" "),a("p",[t._v(": (string) the name of the GUI window")]),t._v(" "),a("p",[t._v("This function will create an instance of "),a("code",[t._v("ti.GUI")]),t._v(" and show the input\nimage on the screen.")]),t._v(" "),a("p",[t._v("It has the same logic as "),a("code",[t._v("ti.imwrite")]),t._v(" for different datatypes.\n:::")]),t._v(" "),a("p",[t._v("::: {.function}\nti.imresize(img, w, h=None):")]),t._v(" "),a("p",[t._v("parameter img")]),t._v(" "),a("p",[t._v(": (np.array or ti.field) the input image.")]),t._v(" "),a("p",[t._v("parameter w")]),t._v(" "),a("p",[t._v(": (int) the width after resizing.")]),t._v(" "),a("p",[t._v("parameter h")]),t._v(" "),a("p",[t._v(": (optional, int) the height after resizing.")]),t._v(" "),a("p",[t._v("return")]),t._v(" "),a("p",[t._v(": (np.array) the resized image.")]),t._v(" "),a("p",[t._v("If "),a("code",[t._v("h")]),t._v(" is not specified, it will be equal to "),a("code",[t._v("w")]),t._v(" by default.")]),t._v(" "),a("p",[t._v("The output image shape is: "),a("code",[t._v("(w, h, *img.shape[2:])")]),t._v(".\n:::")])])}),[],!1,null,null,null);e.default=s.exports}}]);