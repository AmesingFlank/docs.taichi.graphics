(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{495:function(e,t,s){"use strict";s.r(t);var a=s(20),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"developer-installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#developer-installation"}},[e._v("#")]),e._v(" Developer installation")]),e._v(" "),s("p",[e._v("Note this is for the compiler developers of the Taichi programming language. End users should use the pip packages instead of building from source. To build with NVIDIA GPU support, CUDA 10.0+ is needed. This installation guide works for Ubuntu 16.04+ and OS X 10.14+. For precise build instructions on Windows, please check out "),s("a",{attrs:{href:"https://github.com/taichi-dev/taichi/blob/master/appveyor.yml",target:"_blank",rel:"noopener noreferrer"}},[e._v("appveyor.yml"),s("OutboundLink")],1),e._v(", which does basically the same thing as the following instructions. We use MSBUILD.exe to build the generated project. Please note that Windows could have multiple instances of MSBUILD.exe shipped with different products. Please make sure you add the path for MSBUILD.exe within your MSVS directory and make it a higher priority (for instance than the one shipped with .NET).")]),e._v(" "),s("p",[e._v("Note that on Linux/OS X, "),s("code",[e._v("clang")]),e._v(" is the only supported compiler for compiling the Taichi compiler. On Windows only MSVC supported.")]),e._v(" "),s("h2",{attrs:{id:"installing-dependencies"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installing-dependencies"}},[e._v("#")]),e._v(" Installing Dependencies")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Make sure you are using Python 3.6/3.7/3.8")])]),e._v(" "),s("li",[s("p",[e._v("Install Python dependencies:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("python3 -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --user setuptools astor pybind11 pylint sourceinspect\npython3 -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --user pytest pytest-rerunfailures pytest-xdist yapf\npython3 -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --user numpy GitPython coverage colorama autograd\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Make sure you have "),s("code",[e._v("clang")]),e._v(" with version >= 7:")]),e._v(" "),s("ul",[s("li",[e._v("On Windows: Download "),s("a",{attrs:{href:"https://github.com/taichi-dev/taichi_assets/releases/download/llvm10/clang-10.0.0-win.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("clang-10"),s("OutboundLink")],1),e._v(". Make sure you add the "),s("code",[e._v("bin")]),e._v(" folder containing "),s("code",[e._v("clang.exe")]),e._v(" to the "),s("code",[e._v("PATH")]),e._v(" environment variable.")]),e._v(" "),s("li",[e._v("On OS X: you don't need to do anything.")]),e._v(" "),s("li",[e._v("On Ubuntu, execute "),s("code",[e._v("sudo apt install libtinfo-dev clang-8")]),e._v(".")]),e._v(" "),s("li",[e._v("On Arch Linux, execute "),s("code",[e._v("sudo pacman -S clang")]),e._v(". (This is "),s("code",[e._v("clang-10")]),e._v(").")]),e._v(" "),s("li",[e._v("On other Linux distributions, please search "),s("a",{attrs:{href:"pkgs.org"}},[e._v("this site")]),e._v(" for clang version >= 7.")])])]),e._v(" "),s("li",[s("p",[e._v("Make sure you have LLVM 10.0.0. Note that Taichi uses a "),s("strong",[e._v("customized LLVM")]),e._v(" so the pre-built binaries from the LLVM official website or other sources probably won't work. Here we provide LLVM binaries customized for Taichi, which may or may not work depending on your system environment:")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/taichi-dev/taichi_assets/releases/download/llvm10/taichi-llvm-10.0.0-linux.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("LLVM 10.0.0 for Linux"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/taichi-dev/taichi_assets/releases/download/llvm10/taichi-llvm-10.0.0-msvc2019.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("LLVM 10.0.0 for Windows MSVC 2019"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/taichi-dev/taichi_assets/releases/download/llvm10/taichi-llvm-10.0.0-macos.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("LLVM 10.0.0 for OS X"),s("OutboundLink")],1)])])])]),e._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[e._v("注解")]),e._v(" "),s("p",[e._v("On Windows, if you use the pre-built LLVM for Taichi, please add "),s("code",[e._v("$LLVM_FOLDER/bin")]),e._v(" to "),s("code",[e._v("PATH")]),e._v(". Later, when you build Taichi using "),s("code",[e._v("CMake")]),e._v(", set "),s("code",[e._v("LLVM_DIR")]),e._v(" to "),s("code",[e._v("$LLVM_FOLDER/lib/cmake/llvm")]),e._v(".")])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("If the downloaded LLVM does not work, please build from source:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("On Linux or OS X:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/llvm-10.0.0.src.tar.xz\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" xvJf llvm-10.0.0.src.tar.xz\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" llvm-10.0.0.src\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" build\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build\ncmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(" -DLLVM_ENABLE_RTTI:BOOL"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("ON -DBUILD_SHARED_LIBS:BOOL"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("OFF -DCMAKE_BUILD_TYPE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Release -DLLVM_TARGETS_TO_BUILD"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"X86;NVPTX"')]),e._v(" -DLLVM_ENABLE_ASSERTIONS"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("ON\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If you are building on NVIDIA Jetson TX2, use -DLLVM_TARGETS_TO_BUILD="ARM;NVPTX"')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -j "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Check your LLVM installation")]),e._v("\nllvm-config --version  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You should get 10.0.0")]),e._v("\n")])])])]),e._v(" "),s("li",[s("p",[e._v("On Windows:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# LLVM 10.0.0 + MSVC 2019")]),e._v("\ncmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(" -G"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Visual Studio 16 2019"')]),e._v(" -A x64 -DLLVM_ENABLE_RTTI:BOOL"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("ON -DBUILD_SHARED_LIBS:BOOL"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("OFF -DCMAKE_BUILD_TYPE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Release -DLLVM_TARGETS_TO_BUILD"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"X86;NVPTX"')]),e._v(" -DLLVM_ENABLE_ASSERTIONS"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("ON -Thost"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x64 -DLLVM_BUILD_TESTS:BOOL"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("OFF -DCMAKE_INSTALL_PREFIX"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("installed\n")])])]),s("ul",[s("li",[e._v("Then open "),s("code",[e._v("LLVM.sln")]),e._v(" and use Visual Studio 2017+ to build.")]),e._v(" "),s("li",[e._v("Please make sure you are using the "),s("code",[e._v("Release")]),e._v(" configuration. After building the "),s("code",[e._v("INSTALL")]),e._v(" project (under folder "),s("code",[e._v("CMakePredefinedTargets")]),e._v(" in the Solution Explorer window).")]),e._v(" "),s("li",[e._v("If you use MSVC 2019, "),s("strong",[e._v("make sure you use C++17")]),e._v(" for the "),s("code",[e._v("INSTALL")]),e._v(" project.")]),e._v(" "),s("li",[e._v("After the build is complete, find your LLVM binaries and headers in "),s("code",[e._v("build/installed")]),e._v(".")])]),e._v(" "),s("p",[e._v("Please add "),s("code",[e._v("build/installed/bin")]),e._v(" to "),s("code",[e._v("PATH")]),e._v(". Later, when you build Taichi using "),s("code",[e._v("CMake")]),e._v(", set "),s("code",[e._v("LLVM_DIR")]),e._v(" to "),s("code",[e._v("build/installed/lib/cmake/llvm")]),e._v(".")])])])])]),e._v(" "),s("h2",{attrs:{id:"setting-up-cuda-optional"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-cuda-optional"}},[e._v("#")]),e._v(" Setting up CUDA (optional)")]),e._v(" "),s("p",[e._v("If you don't have CUDA, go to "),s("a",{attrs:{href:"https://developer.nvidia.com/cuda-downloads",target:"_blank",rel:"noopener noreferrer"}},[e._v("this website"),s("OutboundLink")],1),e._v(" and download the installer.")]),e._v(" "),s("ul",[s("li",[e._v("To check if CUDA is installed, run "),s("code",[e._v("nvcc --version")]),e._v(" or "),s("code",[e._v("cat /usr/local/cuda/version.txt")]),e._v(".")]),e._v(" "),s("li",[e._v("On "),s("strong",[e._v("Ubuntu")]),e._v(" we recommend choosing "),s("code",[e._v("deb (local)")]),e._v(" as "),s("strong",[e._v("Installer Type")]),e._v(".")]),e._v(" "),s("li",[e._v("On "),s("strong",[e._v("Arch Linux")]),e._v(", you can easily install CUDA via "),s("code",[e._v("pacman -S cuda")]),e._v(" without downloading the installer manually.")])]),e._v(" "),s("h2",{attrs:{id:"setting-up-taichi-for-development"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-taichi-for-development"}},[e._v("#")]),e._v(" Setting up Taichi for development")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Set up environment variables for Taichi:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("On Linux / OS X, please add the following script to your rc file ("),s("code",[e._v("~/.bashrc")]),e._v(", "),s("code",[e._v("~/.zshrc")]),e._v(" or etc. , same for other occurrences in this documentation):")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("TAICHI_REPO_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/path/to/taichi  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Path to your taichi repository")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PYTHONPATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TAICHI_REPO_DIR")]),e._v("/python:"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$PYTHONPATH")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TAICHI_REPO_DIR")]),e._v("/bin:"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PATH")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# export CXX=/path/to/clang  # Uncomment if you encounter issue about compiler in the next step.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# export PATH=/opt/llvm/bin:$PATH  # Uncomment if your llvm or clang is installed in /opt")]),e._v("\n")])])]),s("p",[e._v("Then execute "),s("code",[e._v("source ~/.bashrc")]),e._v(" to reload shell config.")])])])])]),e._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[e._v("注解")]),e._v(" "),s("p",[e._v("If you're using fish, use "),s("code",[e._v("set -x NAME VALUES")]),e._v(", otherwise it won't be loaded by child processes.")])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("On Windows, please add these variables by accessing your system settings:")]),e._v(" "),s("ol",[s("li",[e._v("Add "),s("code",[e._v("TAICHI_REPO_DIR")]),e._v(" whose value is the path to your taichi repository so that Taichi knows you're a developer.")]),e._v(" "),s("li",[e._v("Add or append "),s("code",[e._v("PYTHONPATH")]),e._v(" with "),s("code",[e._v("%TAICHI_REPO_DIR%/python")]),e._v(" so that Python imports Taichi from the local repo.")]),e._v(" "),s("li",[e._v("Add or append "),s("code",[e._v("PATH")]),e._v(" with "),s("code",[e._v("%TAICHI_REPO_DIR%/bin")]),e._v(" so that you can use "),s("code",[e._v("ti")]),e._v(" command.")]),e._v(" "),s("li",[e._v("Add or append "),s("code",[e._v("PATH")]),e._v(" with path to LLVM binary directory installed in previous section.")])])]),e._v(" "),s("li",[s("p",[e._v("Clone the taichi repo "),s("strong",[e._v("recursively")]),e._v(", and build:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/taichi-dev/taichi --depth"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" --branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("master\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" taichi\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" submodule update --init --recursive --depth"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" build\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build\ncmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On Linux / OS X, if you do not set clang as the default compiler")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# use the line below:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   cmake .. -DCMAKE_CXX_COMPILER=clang")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Alternatively, if you would like to set clang as the default compiler")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On Unix CMake honors environment variables $CC and $CXX upon deciding which C and C++ compilers to use")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -j "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Check out "),s("code",[e._v("examples")]),e._v(" for runnable examples. Run them with commands like "),s("code",[e._v("python3 examples/mpm128.py")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("Execute "),s("code",[e._v("python3 -m taichi test")]),e._v(" to run all the tests. It may take up to 5 minutes to run all tests.")])])]),e._v(" "),s("h2",{attrs:{id:"troubleshooting-developer-installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting-developer-installation"}},[e._v("#")]),e._v(" Troubleshooting Developer Installation")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("If "),s("code",[e._v("make")]),e._v(" fails to compile and reports "),s("code",[e._v("fatal error: 'spdlog/XXX.h' file not found")]),e._v(", please try runing "),s("code",[e._v("git submodule update --init --recursive --depth=1")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("If importing Taichi causes")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("FileNotFoundError: [Errno 2] No such file or directory: '/root/taichi/python/taichi/core/../lib/taichi_core.so' -> '/root/taichi/python/taichi/core/../lib/libtaichi_core.so'``\n")])])]),s("p",[e._v("Please try adding "),s("code",[e._v("TAICHI_REPO_DIR")]),e._v(" to environment variables, see "),s("code",[e._v("dev_env_settings")]),e._v('{.interpreted-text role="ref"}.')])]),e._v(" "),s("li",[s("p",[e._v("If the build succeeded but running any Taichi code results in errors like")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Bitcode file (/tmp/taichi-tero94pl/runtime//runtime_x64.bc) not found\n")])])]),s("p",[e._v("please double check "),s("code",[e._v("clang")]),e._v(" is in your "),s("code",[e._v("PATH")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("clang --version\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# version should be >= 7")]),e._v("\n")])])]),s("p",[e._v("and our "),s("strong",[e._v("Taichi configured")]),e._v(" "),s("code",[e._v("llvm-as")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("llvm-as --version\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# version should be >= 8")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("which")]),e._v(" llvm-as\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# should be /usr/local/bin/llvm-as or /opt/XXX/bin/llvm-as, which is our configured installation")]),e._v("\n")])])]),s("p",[e._v("If not, please install "),s("code",[e._v("clang")]),e._v(" and "),s("strong",[e._v("build LLVM from source")]),e._v(" with instructions above in "),s("code",[e._v("dev_install")]),e._v('{.interpreted-text role="ref"}, then add their path to environment variable '),s("code",[e._v("PATH")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("If you encounter other issues, feel free to report (please include the details) by "),s("a",{attrs:{href:"https://github.com/taichi-dev/taichi/issues/new?labels=potential+bug&template=bug_report.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("opening an issue on GitHub"),s("OutboundLink")],1),e._v(". We are willing to help!")])]),e._v(" "),s("li",[s("p",[e._v("See also "),s("RouterLink",{attrs:{to:"/zh/documentation/overview/install.html#troubleshooting"}},[e._v("Troubleshooting")]),e._v(" for issues that may share with end-user installation.")],1)])]),e._v(" "),s("h2",{attrs:{id:"docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),s("p",[e._v("For those who prefer to use Docker, we also provide a Dockerfile which helps setup the Taichi development environment with CUDA support based on Ubuntu docker image.")]),e._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[e._v("注解")]),e._v(" "),s("p",[e._v("In order to follow the instructions in this section, please make sure you have the "),s("a",{attrs:{href:"https://www.docker.com/products/docker-desktop",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker DeskTop (or Engine for Linux)"),s("OutboundLink")],1),e._v(" installed and set up properly.")])]),e._v(" "),s("h3",{attrs:{id:"build-the-docker-image"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-docker-image"}},[e._v("#")]),e._v(" Build the Docker Image")]),e._v(" "),s("p",[e._v("From within the root directory of the taichi Git repository, execute "),s("code",[e._v("docker build -t taichi:latest .")]),e._v(" to build a Docker image based off the local master branch tagged with "),s("em",[e._v("latest")]),e._v(". Since this builds the image from source, please expect up to 40 mins build time if you don't have cached Docker image layers.")]),e._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[e._v("注解")]),e._v(" "),s("p",[e._v("In order to save the time on building Docker images, you could always visit our "),s("a",{attrs:{href:"https://hub.docker.com/r/taichidev/taichi",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub repository"),s("OutboundLink")],1),e._v(" and pull the versions of pre-built images you would like to use. Currently the builds are triggered per taichi Github release.")]),e._v(" "),s("p",[e._v("For example, to pull a image built from release v0.6.17, run "),s("code",[e._v("docker pull taichidev/taichi:v0.6.17")])])]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),s("p",[e._v("The nature of Docker container determines that no changes to the file system on the container could be preserved once you exit from the container. If you want to use Docker as a persistent development environment, we recommend you "),s("a",{attrs:{href:"https://docs.docker.com/storage/volumes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("mount the taichi Git repository to the container as a volume"),s("OutboundLink")],1),e._v(" and set the Python path to the mounted directory.")])]),e._v(" "),s("h3",{attrs:{id:"use-docker-image-on-macos-cpu-only"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-docker-image-on-macos-cpu-only"}},[e._v("#")]),e._v(" Use Docker Image on macOS (cpu only)")]),e._v(" "),s("ol",[s("li",[e._v("Make sure "),s("code",[e._v("XQuartz")]),e._v(" and "),s("code",[e._v("socat")]),e._v(" are installed:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("brew cask "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" xquartz\nbrew "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" socat\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("Temporally disable the xhost access-control: "),s("code",[e._v("xhost +")])]),e._v(" "),s("li",[e._v("Start the Docker container with "),s("code",[e._v("docker run -it -e DISPLAY=$(ipconfig getifaddr en0):0 taichidev/taichi:v0.6.17")])]),e._v(" "),s("li",[e._v("Do whatever you want within the container, e.g. you could run tests or an example, try: "),s("code",[e._v("ti test")]),e._v(" or "),s("code",[e._v("ti example mpm88")])]),e._v(" "),s("li",[e._v("Exit from the container with "),s("code",[e._v("exit")]),e._v(" or "),s("code",[e._v("ctrl+D")])]),e._v(" "),s("li",[e._v("[To keep your xhost safe] Re-enable the xhost access-control: "),s("code",[e._v("xhost -")])])]),e._v(" "),s("h3",{attrs:{id:"use-docker-image-on-ubuntu-with-cuda-support"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-docker-image-on-ubuntu-with-cuda-support"}},[e._v("#")]),e._v(" Use Docker Image on Ubuntu (with CUDA support)")]),e._v(" "),s("ol",[s("li",[e._v("Make sure your host machine has CUDA properly installed and configured. Usually you could verify it by running "),s("code",[e._v("nvidia-smi")])]),e._v(" "),s("li",[e._v("Make sure "),s("a",{attrs:{href:"https://github.com/NVIDIA/nvidia-docker",target:"_blank",rel:"noopener noreferrer"}},[e._v("NVIDIA Container Toolkit"),s("OutboundLink")],1),e._v(" is properly installed:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("distribution")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" /etc/os-release"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" $ID$VERSION_ID"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -s -L https://nvidia.github.io/nvidia-docker/gpgkey "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" apt-key "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -s -L https://nvidia.github.io/nvidia-docker/"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$distribution")]),e._v("/nvidia-docker.list "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" /etc/apt/sources.list.d/nvidia-docker.list\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y nvidia-container-toolkit\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl restart docker\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[e._v("Make sure "),s("code",[e._v("xorg")]),e._v(" is installed: "),s("code",[e._v("sudo apt-get install xorg")])]),e._v(" "),s("li",[e._v("Temporally disable the xhost access-control: "),s("code",[e._v("xhost +")])]),e._v(" "),s("li",[e._v("Start the Docker container with "),s("code",[e._v("sudo docker run -it --gpus all -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix taichidev/taichi:v0.6.17")])]),e._v(" "),s("li",[e._v("Do whatever you want within the container, e.g. you could run tests or an example, try: "),s("code",[e._v("ti test")]),e._v(" or "),s("code",[e._v("ti example mpm88")])]),e._v(" "),s("li",[e._v("Exit from the container with "),s("code",[e._v("exit")]),e._v(" or "),s("code",[e._v("ctrl+D")])]),e._v(" "),s("li",[s("strong",[e._v("[To keep your xhost safe]")]),e._v(" Re-enable the xhost access-control: "),s("code",[e._v("xhost -")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);