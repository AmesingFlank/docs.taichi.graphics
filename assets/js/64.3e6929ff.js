(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{471:function(e,t,n){"use strict";n.r(t);var o=n(20),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"contribution-guidelines"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contribution-guidelines"}},[e._v("#")]),e._v(" Contribution guidelines")]),e._v(" "),n("p",[e._v("First of all, thank you for contributing! We welcome contributions of\nall forms, including but not limited to")]),e._v(" "),n("ul",[n("li",[e._v("Bug fixes")]),e._v(" "),n("li",[e._v("Proposing and implementing new features")]),e._v(" "),n("li",[e._v("Documentation improvement and translations (e.g. "),n("a",{attrs:{href:"https://github.com/taichi-dev/taichi-docs-zh-cn",target:"_blank",rel:"noopener noreferrer"}},[e._v("Simplified\nChinese"),n("OutboundLink")],1),e._v(")")]),e._v(" "),n("li",[e._v("Improved error messages that are more user-friendly")]),e._v(" "),n("li",[e._v("New test cases")]),e._v(" "),n("li",[e._v("New examples")]),e._v(" "),n("li",[e._v("Compiler performance patches")]),e._v(" "),n("li",[e._v("Blog posts and tutorials on Taichi")]),e._v(" "),n("li",[e._v("Participation in the "),n("a",{attrs:{href:"https://forum.taichi.graphics/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Taichi forum"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Introduce Taichi to your friends or simply star "),n("a",{attrs:{href:"https://github.com/taichi-dev/taichi",target:"_blank",rel:"noopener noreferrer"}},[e._v("the\nproject"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("li",[e._v("Typo fixes in the documentation, code or comments (please directly\nmake a pull request for minor issues like these)")])]),e._v(" "),n("h2",{attrs:{id:"how-to-contribute-bug-fixes-and-new-features"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-contribute-bug-fixes-and-new-features"}},[e._v("#")]),e._v(" How to contribute bug fixes and new features")]),e._v(" "),n("p",[e._v("Issues marked with "),n("a",{attrs:{href:"https://github.com/taichi-dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22",target:"_blank",rel:"noopener noreferrer"}},[e._v('"good first\nissue"'),n("OutboundLink")],1),e._v("\nare great chances for starters.")]),e._v(" "),n("ul",[n("li",[e._v("Please first leave a note (e.g. "),n("em",[e._v("I know how to fix this and would\nlike to help!")]),e._v(") on the issue, so that people know someone is already\nworking on it. This helps prevent redundant work;")]),e._v(" "),n("li",[e._v("If no core developer has commented and described a potential\nsolution on the issue, please briefly describe your plan, and wait\nfor a core developer to reply before you start. This helps keep\nimplementations simple and effective.")])]),e._v(" "),n("p",[e._v("Issues marked with "),n("a",{attrs:{href:"https://github.com/taichi-dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22welcome+contribution%22",target:"_blank",rel:"noopener noreferrer"}},[e._v('"welcome\ncontribution"'),n("OutboundLink")],1),e._v("\nare slightly more challenging but still friendly to beginners.")]),e._v(" "),n("h2",{attrs:{id:"high-level-guidelines"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#high-level-guidelines"}},[e._v("#")]),e._v(" High-level guidelines")]),e._v(" "),n("ul",[n("li",[e._v("Be pragmatic: practically solving problems is our ultimate goal.")]),e._v(" "),n("li",[e._v("No overkills: always use "),n("em",[e._v("easy")]),e._v(" solutions to solve easy problems, so\nthat you have time and energy for real hard ones.")]),e._v(" "),n("li",[e._v("Almost every design decision has pros and cons. A decision is\n[good]{.title-ref} if its pros outweigh its cons. Always think about\nboth sides.")]),e._v(" "),n("li",[e._v("Debugging is hard. Changesets should be small so that sources of\nbugs can be easily pinpointed.")]),e._v(" "),n("li",[e._v("Unit/integration tests are our friends.")])]),e._v(" "),n("div",{staticClass:"custom-block note"},[n("p",{staticClass:"custom-block-title"},[e._v("æ³¨è§£")]),e._v(" "),n("p",[e._v('"There are two ways of constructing a software design: One way is to\nmake it so simple that there are obviously no deficiencies, and the\nother way is to make it so complicated that there are no obvious\ndeficiencies. '),n("em",[e._v("The first method is far more difficult")]),e._v('."\nâ€” '),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Tony_Hoare",target:"_blank",rel:"noopener noreferrer"}},[e._v("C.A.R. Hoare"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("One thing to keep in mind is that, Taichi was originally born as an\nacademic research project. This usually means that some parts did not\nhave the luxury to go through a solid design. While we are always trying\nto improve the code quality, it doesn't mean that the project is free\nfrom technical debts. Some places may be confusing or overly\ncomplicated. Whenever you spot one, you are more than welcome to shoot\nus a PR! ðŸ˜ƒ")]),e._v(" "),n("h2",{attrs:{id:"effective-communication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#effective-communication"}},[e._v("#")]),e._v(" Effective communication")]),e._v(" "),n("ul",[n("li",[e._v("How much information we effectively convey, is way more important\nthan how many words we typed.")]),e._v(" "),n("li",[e._v("Be constructive. Be polite. Be organized. Be concise.")]),e._v(" "),n("li",[e._v("Bulleted lists are our friends.")]),e._v(" "),n("li",[e._v("Proofread before you post: if you are the reader, can you understand\nwhat you typed?")]),e._v(" "),n("li",[e._v("If you are not a native speaker, consider using a spell checker such\nas "),n("a",{attrs:{href:"https://app.grammarly.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Grammarly"),n("OutboundLink")],1),e._v(".")])]),e._v(" "),n("p",[e._v("Please base your discussion and feedback on facts, and not personal\nfeelings. It is very important for all of us to maintain a friendly and\nblame-free community. Some examples:")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("Acceptable :-)")]),e._v(" "),n("p",[e._v("This design could be confusing to new Taichi users.")])]),e._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[e._v("Not Acceptable")]),e._v(" "),n("p",[e._v("This design is terrible.")])]),e._v(" "),n("h2",{attrs:{id:"making-good-pull-requests"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#making-good-pull-requests"}},[e._v("#")]),e._v(" Making good pull requests")]),e._v(" "),n("ul",[n("li",[e._v("PRs with "),n("strong",[e._v("small")]),e._v(" changesets are preferred. A PR should ideally\naddress "),n("strong",[e._v("only one issue")]),e._v(".\n"),n("ul",[n("li",[e._v("It is fine to include off-topic "),n("strong",[e._v("trivial")]),e._v(" refactoring such as\ntypo fixes;")]),e._v(" "),n("li",[e._v("The reviewers reserve the right to ask PR authors to remove\noff-topic "),n("strong",[e._v("non-trivial")]),e._v(" changes.")])])]),e._v(" "),n("li",[e._v("All commits in a PR will always be "),n("strong",[e._v("squashed and merged into master\nas a single commit")]),e._v(".")]),e._v(" "),n("li",[e._v("PR authors "),n("strong",[e._v("should not squash commits on their own")]),e._v(";")]),e._v(" "),n("li",[e._v("When implementing a complex feature, consider breaking it down into\nsmall PRs, to keep a more detailed development history and to\ninteract with core developers more frequently.")]),e._v(" "),n("li",[e._v("If you want early feedback from core developers\n"),n("ul",[n("li",[e._v("Open a PR in\n"),n("a",{attrs:{href:"https://github.blog/2019-02-14-introducing-draft-pull-requests/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Draft"),n("OutboundLink")],1),e._v("\nstate on GitHub so that you can share your progress;")]),e._v(" "),n("li",[e._v("Make sure you @ the corresponding developer in the comments or\nrequest the review.")])])]),e._v(" "),n("li",[e._v("If you are making multiple PRs\n"),n("ul",[n("li",[e._v("Independent PRs should be based on "),n("strong",[e._v("different")]),e._v(" branches\nforking from "),n("code",[e._v("master")]),e._v(";")]),e._v(" "),n("li",[e._v("PRs with dependencies should be raised only after all\nprerequisite PRs are merged into "),n("code",[e._v("master")]),e._v(".")])])]),e._v(" "),n("li",[e._v("All PRs should ideally come with corresponding "),n("strong",[e._v("tests")]),e._v(";")]),e._v(" "),n("li",[e._v("All PRs should come with "),n("strong",[e._v("documentation update")]),e._v(", except for\ninternal compiler implementations;")]),e._v(" "),n("li",[e._v("All PRs must pass "),n("strong",[e._v("continuous integration tests")]),e._v(" before they get\nmerged;")]),e._v(" "),n("li",[e._v("PR titles should follow "),n("code",[e._v("prtag")]),e._v('{.interpreted-text role="ref"};')]),e._v(" "),n("li",[e._v("A great article from Google on "),n("a",{attrs:{href:"https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-your.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("how to have your PR merged\nquickly"),n("OutboundLink")],1),e._v(".\n"),n("a",{attrs:{href:"https://github.com/yuanming-hu/public_files/blob/master/graphics/taichi/google_review_comments.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("[PDF]"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"reviewing-pr-merging"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reviewing-pr-merging"}},[e._v("#")]),e._v(" Reviewing & PR merging")]),e._v(" "),n("ul",[n("li",[e._v("Please try to follow these tips from Google\n"),n("ul",[n("li",[n("a",{attrs:{href:"https://testing.googleblog.com/2018/05/code-health-understanding-code-in-review.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Code Health: Understanding Code In\nReview"),n("OutboundLink")],1),e._v(";\n"),n("a",{attrs:{href:"https://github.com/yuanming-hu/public_files/blob/master/graphics/taichi/google_understanding_code.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("[PDF]"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Code Health: Respectful Reviews == Useful\nReviews"),n("OutboundLink")],1),e._v(".\n"),n("a",{attrs:{href:"https://github.com/yuanming-hu/public_files/blob/master/graphics/taichi/google_respectful_reviews.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("[PDF]"),n("OutboundLink")],1)])])]),e._v(" "),n("li",[e._v("The merger should always "),n("strong",[e._v("squash and merge")]),e._v(" PRs into the master\nbranch;")]),e._v(" "),n("li",[e._v("The master branch is required to have a "),n("strong",[e._v("linear history")]),e._v(";")]),e._v(" "),n("li",[e._v("Make sure the PR passes "),n("strong",[e._v("continuous integration tests")]),e._v(", except for\ncases like documentation updates;")]),e._v(" "),n("li",[e._v("Make sure the title follows "),n("code",[e._v("prtag")]),e._v('{.interpreted-text role="ref"}.')])]),e._v(" "),n("h2",{attrs:{id:"using-continuous-integration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-continuous-integration"}},[e._v("#")]),e._v(" Using continuous integration")]),e._v(" "),n("ul",[n("li",[e._v("Continuous Integration (CI), will "),n("strong",[e._v("build")]),e._v(" and "),n("strong",[e._v("test")]),e._v(" your\ncommits in a PR against in environments.")]),e._v(" "),n("li",[e._v("Currently, Taichi uses "),n("a",{attrs:{href:"https://travis-ci.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Travis CI"),n("OutboundLink")],1),e._v(" (for OS X\nand Linux) and "),n("a",{attrs:{href:"https://www.appveyor.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("AppVeyor"),n("OutboundLink")],1),e._v(" (for Windows).")]),e._v(" "),n("li",[e._v("CI will be triggered every time you push commits to an open PR.")]),e._v(" "),n("li",[e._v("You can prepend "),n("code",[e._v("[skip ci]")]),e._v(" to your commit message to avoid\ntriggering CI. e.g. "),n("code",[e._v("[skip ci] This commit will not trigger CI")])]),e._v(" "),n("li",[e._v("A tick on the right of commit hash means CI passed, a cross means CI\nfailed.")])]),e._v(" "),n("h2",{attrs:{id:"enforcing-code-style"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enforcing-code-style"}},[e._v("#")]),e._v(" Enforcing code style")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Locally, you can run "),n("code",[e._v("ti format")]),e._v(" in the command line to re-format\ncode style. Note that you have to install "),n("code",[e._v("clang-format-6.0")]),e._v(" and\n"),n("code",[e._v("yapf v0.29.0")]),e._v(" locally before you use "),n("code",[e._v("ti format")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("If you don't have to install these formatting tools locally, use\nthe "),n("strong",[e._v("format server")]),e._v(". It's an online version of "),n("code",[e._v("ti format")]),e._v(".")]),e._v(" "),n("ul",[n("li",[e._v("Go to â˜· "),n("a",{attrs:{href:"http://kun.csail.mit.edu:31415/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://kun.csail.mit.edu:31415/"),n("OutboundLink")],1),e._v(", and click at the\ndesired PR id.")]),e._v(" "),n("li",[e._v("Come back to the PR page, you'll see a user called\n@taichi-gardener (bot) pushed a commit named\n"),n("code",[e._v("[skip ci] enforce code format")]),e._v(".")]),e._v(" "),n("li",[e._v("You won't see the bot's commit if it didn't find anything\nnot matching the format.")]),e._v(" "),n("li",[e._v("Then please run "),n("code",[e._v("git pull")]),e._v(" in your local branch to pull the\nformatted code.")]),e._v(" "),n("li",[e._v("Note that commit messages marked with "),n("code",[e._v("[format]")]),e._v(" will\nautomatically trigger the format server. e.g.\n"),n("code",[e._v("[format] your commit message")])])])])]),e._v(" "),n("h2",{attrs:{id:"pr-title-format-and-tags"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pr-title-format-and-tags"}},[e._v("#")]),e._v(" PR title format and tags")]),e._v(" "),n("p",[e._v("PR titles will be part of the commit history reflected in the "),n("code",[e._v("master")]),e._v("\nbranch, therefore it is important to keep PR titles readable.")]),e._v(" "),n("ul",[n("li",[e._v("Please always prepend "),n("strong",[e._v("at least one tag")]),e._v(" such as "),n("code",[e._v("[Lang]")]),e._v(" to PR\ntitles:\n"),n("ul",[n("li",[e._v("When using multiple tags, make sure there is exactly one\nspace between tags;")]),e._v(" "),n("li",[e._v('E.g., "[Lang][refactor]" (no space) should be replaced\nby "[Lang] [refactor]";')])])]),e._v(" "),n("li",[e._v("The first letter of the PR title body should be capitalized:\n"),n("ul",[n("li",[e._v("E.g., "),n("code",[e._v("[Doc] improve documentation")]),e._v(" should be replaced by\n"),n("code",[e._v("[Doc] Improve documentation")]),e._v(";")]),e._v(" "),n("li",[n("code",[e._v('[Lang] "ti.sqr(x)" is now deprecated')]),e._v(" is fine because "),n("code",[e._v('"')]),e._v("\nis a symbol.")])])]),e._v(" "),n("li",[e._v('Please do not include back quotes ("`") in PR titles.')]),e._v(" "),n("li",[e._v('For example, "[Metal] Support bitmasked SNode", "[OpenGL]\nAtomicMin/Max support", or "[Opt] [IR] Enhanced constant\nfolding".')])]),e._v(" "),n("p",[e._v("Frequently used tags:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("[Metal], [OpenGL], [CPU], [CUDA]")]),e._v(": backends;")]),e._v(" "),n("li",[n("code",[e._v("[LLVM]")]),e._v(": the LLVM backend shared by CPUs and CUDA;")]),e._v(" "),n("li",[n("code",[e._v("[Lang]")]),e._v(": frontend language features, including syntax sugars;")]),e._v(" "),n("li",[n("code",[e._v("[Std]")]),e._v(": standard library, e.g. "),n("code",[e._v("ti.Matrix")]),e._v(" and "),n("code",[e._v("ti.Vector")]),e._v(";")]),e._v(" "),n("li",[n("code",[e._v("[Sparse]")]),e._v(": sparse computation;")]),e._v(" "),n("li",[n("code",[e._v("[IR]")]),e._v(": intermediate representation;")]),e._v(" "),n("li",[n("code",[e._v("[Opt]")]),e._v(": IR optimization passes;")]),e._v(" "),n("li",[n("code",[e._v("[GUI]")]),e._v(": the built-in GUI system;")]),e._v(" "),n("li",[n("code",[e._v("[Refactor]")]),e._v(": code refactoring;")]),e._v(" "),n("li",[n("code",[e._v("[CLI]")]),e._v(": commandline interfaces, e.g. the "),n("code",[e._v("ti")]),e._v(" command;")]),e._v(" "),n("li",[n("code",[e._v("[Doc]")]),e._v(": documentation under "),n("code",[e._v("docs/")]),e._v(";")]),e._v(" "),n("li",[n("code",[e._v("[Example]")]),e._v(": examples under "),n("code",[e._v("examples/")]),e._v(";")]),e._v(" "),n("li",[n("code",[e._v("[Test]")]),e._v(": adding or improving tests under "),n("code",[e._v("tests/")]),e._v(";")]),e._v(" "),n("li",[n("code",[e._v("[Linux]")]),e._v(": Linux platform;")]),e._v(" "),n("li",[n("code",[e._v("[Mac]")]),e._v(": Mac OS X platform;")]),e._v(" "),n("li",[n("code",[e._v("[Windows]")]),e._v(": Windows platform;")]),e._v(" "),n("li",[n("code",[e._v("[Perf]")]),e._v(": performance improvements;")]),e._v(" "),n("li",[n("code",[e._v("[Misc]")]),e._v(": something that doesn't belong to any category, such as\nversion bump, reformatting;")]),e._v(" "),n("li",[n("code",[e._v("[Bug]")]),e._v(": bug fixes;")]),e._v(" "),n("li",[e._v("Check out more tags in\n"),n("a",{attrs:{href:"https://github.com/taichi-dev/taichi/blob/master/misc/prtags.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("misc/prtags.json"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("li",[e._v("When introducing a new tag, please update the list in\n"),n("code",[e._v("misc/prtags.json")]),e._v(" in the first PR with that tag, so that people can\nfollow.")])]),e._v(" "),n("div",{staticClass:"custom-block note"},[n("p",{staticClass:"custom-block-title"},[e._v("æ³¨è§£")]),e._v(" "),n("p",[e._v("We do appreciate all kinds of contributions, yet we should not expose\nthe title of every PR to end-users. Therefore the changelog will\ndistinguish [what the user should know]{.title-ref} from [what the\ndevelopers are doing]{.title-ref}. This is done by "),n("strong",[e._v("capitalizing PR\ntags")]),e._v(":")]),e._v(" "),n("ul",[n("li",[e._v("PRs with visible/notable features to the users should be marked\nwith tags starting with "),n("strong",[e._v("the first letter capitalized")]),e._v(", e.g.\n"),n("code",[e._v("[Metal], [OpenGL], [IR], [Lang], [CLI]")]),e._v(". When releasing a new\nversion, a script ("),n("code",[e._v("python/taichi/make_changelog.py")]),e._v(") will\ngenerate a changelog with these changes (PR title) highlighted.\nTherefore it is "),n("strong",[e._v("important")]),e._v(" to make sure the end-users can\nunderstand what your PR does, "),n("strong",[e._v("based on your PR title")]),e._v(".")]),e._v(" "),n("li",[e._v("Other PRs (underlying development/intermediate implementation)\nshould use tags with "),n("strong",[e._v("everything in lowercase letters")]),e._v(": e.g.\n"),n("code",[e._v("[metal], [opengl], [ir], [lang], [cli]")]),e._v(".")]),e._v(" "),n("li",[e._v("Because of the way the release changelog is generated, there\nshould be "),n("strong",[e._v("at most one captialized tag")]),e._v(" in a PR title to prevent\nduplicate PR highlights. For example,\n"),n("code",[e._v("[GUI] [Mac] Support modifier keys")]),e._v(" (#1189) is a bad example, we\nshould use "),n("code",[e._v("[gui] [Mac] Support modifier keys in GUI")]),e._v(" instead.\nPlease capitalize the tag that is most relevant to the PR.")])])]),e._v(" "),n("h2",{attrs:{id:"c-and-python-standards"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-and-python-standards"}},[e._v("#")]),e._v(" C++ and Python standards")]),e._v(" "),n("p",[e._v("The C++ part of Taichi is written in C++17, and the Python part in 3.6+.\nYou can assume that C++17 and Python 3.6 features are always available.")]),e._v(" "),n("h2",{attrs:{id:"tips-on-the-taichi-compiler-development"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tips-on-the-taichi-compiler-development"}},[e._v("#")]),e._v(" Tips on the Taichi compiler development")]),e._v(" "),n("p",[n("RouterLink",{attrs:{to:"/zh/contribution/compilation.html"}},[e._v("Life of a Taichi kernel")]),e._v(" may worth checking out. It\nexplains the whole compilation process.")],1),e._v(" "),n("p",[e._v("See also "),n("RouterLink",{attrs:{to:"/zh/contribution/utilities.html#benchmarking-and-regression-tests"}},[e._v("Benchmarking and regression tests")]),e._v(" if your work involves\nIR optimization.")],1),e._v(" "),n("p",[e._v("When creating a Taichi program using\n"),n("code",[e._v("ti.init(arch=desired_arch, **kwargs)")]),e._v(", pass in the following parameters\nto make the Taichi compiler print out IR:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("print_preprocessed = True")]),e._v(": print results of the frontend Python\nAST transform. The resulting scripts will generate a Taichi Frontend\nAST when executed.")]),e._v(" "),n("li",[n("code",[e._v("print_ir = True")]),e._v(": print the Taichi IR transformation process of\nkernel (excluding accessors) compilation.")]),e._v(" "),n("li",[n("code",[e._v("print_accessor_ir = True")]),e._v(": print the IR transformation process of\ndata accessors, which are special and simple kernels. (This is\nrarely used, unless you are debugging the compilation of data\naccessors.)")]),e._v(" "),n("li",[n("code",[e._v("print_struct_llvm_ir = True")]),e._v(": save the emitted LLVM IR by Taichi\nstruct compilers.")]),e._v(" "),n("li",[n("code",[e._v("print_kernel_llvm_ir = True")]),e._v(": save the emitted LLVM IR by Taichi\nkernel compilers.")]),e._v(" "),n("li",[n("code",[e._v("print_kernel_llvm_ir_optimized = True")]),e._v(": save the optimized LLVM IR\nof each kernel.")]),e._v(" "),n("li",[n("code",[e._v("print_kernel_nvptx = True")]),e._v(": save the emitted NVPTX of each kernel\n(CUDA only).")])]),e._v(" "),n("div",{staticClass:"custom-block note"},[n("p",{staticClass:"custom-block-title"},[e._v("æ³¨è§£")]),e._v(" "),n("p",[e._v("Data accessors in Python-scope are implemented as special Taichi\nkernels. For example, "),n("code",[e._v("x[1, 2, 3] = 3")]),e._v(" will call the writing accessor\nkernel of "),n("code",[e._v("x")]),e._v(", and "),n("code",[e._v("print(y[42])")]),e._v(" will call the reading accessor kernel\nof "),n("code",[e._v("y")]),e._v(".")])]),e._v(" "),n("h2",{attrs:{id:"folder-structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#folder-structure"}},[e._v("#")]),e._v(" Folder structure")]),e._v(" "),n("p",[e._v("Key folders are:")]),e._v(" "),n("p",[n("em",[e._v("(the following chart can be generated by "),n("a",{attrs:{href:"https://linux.die.net/man/1/tree",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("tree . -L 2")]),n("OutboundLink")],1),e._v(")")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".\nâ”œâ”€â”€ benchmarks              # Performance benchmarks\nâ”œâ”€â”€ docs                    # Documentation\nâ”œâ”€â”€ examples                # Examples\nâ”œâ”€â”€ external                # External libraries\nâ”œâ”€â”€ misc                    # Random (yet useful) files\nâ”œâ”€â”€ python                  # Python frontend implementation\nâ”‚Â Â  â”œâ”€â”€ core                # Loading & interacting with Taichi core\nâ”‚Â Â  â”œâ”€â”€ lang                # Python-embbed Taichi language & syntax (major)\nâ”‚Â Â  â”œâ”€â”€ tools               # Handy end-user tools\nâ”‚Â Â  â””â”€â”€ misc                # Miscellaneous utilities\nâ”œâ”€â”€ taichi                  # The core compiler implementation\nâ”‚Â Â  â”œâ”€â”€ analysis            # Static analysis passes\nâ”‚Â Â  â”œâ”€â”€ backends            # Device-dependent code generators/runtime environments\nâ”‚Â Â  â”œâ”€â”€ codegen             # Code generation base classes\nâ”‚Â Â  â”œâ”€â”€ common\nâ”‚Â Â  â”œâ”€â”€ gui                 # GUI system\nâ”‚Â Â  â”œâ”€â”€ inc                 # Small definition files to be included repeatedly\nâ”‚Â Â  â”œâ”€â”€ ir                  # Intermediate representation\nâ”‚Â Â  â”œâ”€â”€ jit                 # Just-In-Time compilation base classes\nâ”‚Â Â  â”œâ”€â”€ llvm                # LLVM utilities\nâ”‚Â Â  â”œâ”€â”€ math                # Math utilities\nâ”‚Â Â  â”œâ”€â”€ platform            # Platform supports\nâ”‚Â Â  â”œâ”€â”€ program             # Top-level constructs\nâ”‚Â Â  â”œâ”€â”€ python              # C++/Python interfaces\nâ”‚Â Â  â”œâ”€â”€ runtime             # LLVM runtime environments\nâ”‚Â Â  â”œâ”€â”€ struct              # Struct compiler base classes\nâ”‚Â Â  â”œâ”€â”€ system              # OS-related infrastructure\nâ”‚Â Â  â”œâ”€â”€ transforms          # IR transform passes\nâ”‚Â Â  â””â”€â”€ util                # Miscellaneous utilities\nâ””â”€â”€ tests                   # Functional tests\n    â”œâ”€â”€ cpp                 # Python tests (major)\n    â””â”€â”€ python              # C++ tests\n")])])]),n("h2",{attrs:{id:"testing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[e._v("#")]),e._v(" Testing")]),e._v(" "),n("p",[e._v("Tests should be added to "),n("code",[e._v("tests/")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"command-line-tools"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#command-line-tools"}},[e._v("#")]),e._v(" Command line tools")]),e._v(" "),n("ul",[n("li",[e._v("Use "),n("code",[e._v("ti test")]),e._v(" to run all the tests.")]),e._v(" "),n("li",[e._v("Use "),n("code",[e._v("ti test -v")]),e._v(" for verbose outputs.")]),e._v(" "),n("li",[e._v("Use "),n("code",[e._v("ti test -C")]),e._v(" to run tests and record code coverage, see\n"),n("RouterLink",{attrs:{to:"/zh/contribution/utilities.html#coverage"}},[e._v("Code coverage")]),e._v(" for more infomations.")],1),e._v(" "),n("li",[e._v("Use "),n("code",[e._v("ti test -a <arch(s)>")]),e._v(" for testing against specified backend(s).\ne.g. "),n("code",[e._v("ti test -a cuda,metal")]),e._v(".")]),e._v(" "),n("li",[e._v("Use "),n("code",[e._v("ti test -na <arch(s)>")]),e._v(" for testing all architectures excluding\nsome of them. e.g. "),n("code",[e._v("ti test -na opengl,x64")]),e._v(".")]),e._v(" "),n("li",[e._v("Use "),n("code",[e._v("ti test <filename(s)>")]),e._v(" to run specific tests in filenames. e.g.\n"),n("code",[e._v("ti test numpy_io")]),e._v(" will run all tests in\n"),n("code",[e._v("tests/python/test_numpy_io.py")]),e._v(".")]),e._v(" "),n("li",[e._v("Use "),n("code",[e._v("ti test -c")]),e._v(" to run only the C++ tests. e.g.\n"),n("code",[e._v("ti test -c alg_simp")]),e._v(" will run "),n("code",[e._v("tests/cpp/test_alg_simp.cpp")]),e._v(".")]),e._v(" "),n("li",[e._v("Use "),n("code",[e._v("ti test -k <key>")]),e._v(" to run tests that match the specified key.\ne.g. "),n("code",[e._v('ti test linalg -k "cross or diag"')]),e._v(" will run the "),n("code",[e._v("test_cross")]),e._v("\nand "),n("code",[e._v("test_diag")]),e._v(" in "),n("code",[e._v("tests/python/test_linalg.py")]),e._v(".")])]),e._v(" "),n("p",[e._v("For more options, see "),n("code",[e._v("ti test -h")]),e._v(".")]),e._v(" "),n("p",[e._v("For more details on how to write a test case, see\n"),n("RouterLink",{attrs:{to:"/zh/contribution/write_test.html"}},[e._v("Workflow for writing a Python test")]),e._v(".")],1),e._v(" "),n("h2",{attrs:{id:"documentation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#documentation"}},[e._v("#")]),e._v(" Documentation")]),e._v(" "),n("p",[e._v("Documentations are put under the folder "),n("code",[e._v("docs/")]),e._v(".")]),e._v(" "),n("ul",[n("li",[e._v("We use "),n("a",{attrs:{href:"https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("reStructured\ntext"),n("OutboundLink")],1),e._v("\n(.rst) to write documentation.")]),e._v(" "),n("li",[e._v("We host our documentation online using\n"),n("a",{attrs:{href:"https://taichi.readthedocs.io/en/stable",target:"_blank",rel:"noopener noreferrer"}},[e._v("readthedocs.io"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("li",[e._v("Use "),n("code",[e._v("ti doc")]),e._v(" to build the documentation locally.")]),e._v(" "),n("li",[e._v("Open the documentation at "),n("code",[e._v("docs/build/index.html")]),e._v(".")])]),e._v(" "),n("div",{staticClass:"custom-block note"},[n("p",{staticClass:"custom-block-title"},[e._v("æ³¨è§£")]),e._v(" "),n("p",[e._v("On Linux/OS X, use "),n("code",[e._v("watch -n 1 ti doc")]),e._v(" to continuously build the\ndocumentation.")]),e._v(" "),n("p",[e._v("If the OpenGL backend detector keeps creating new windows, execute\n"),n("code",[e._v("export TI_WITH_OPENGL=0")]),e._v(" for "),n("code",[e._v("ti doc")]),e._v(".")])]),e._v(" "),n("h2",{attrs:{id:"efficient-code-navigation-across-python-c"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#efficient-code-navigation-across-python-c"}},[e._v("#")]),e._v(" Efficient code navigation across Python/C++")]),e._v(" "),n("p",[e._v("If you work on the language frontend (Python/C++ interface), to navigate\naround the code base,\n"),n("a",{attrs:{href:"https://github.com/tqchen/ffi-navigator",target:"_blank",rel:"noopener noreferrer"}},[e._v("ffi-navigator"),n("OutboundLink")],1),e._v(" allows you to\njump from Python bindings to their definitions in C++, please follow their\nREADME to set up your editor.")]),e._v(" "),n("h2",{attrs:{id:"upgrading-cuda"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#upgrading-cuda"}},[e._v("#")]),e._v(" Upgrading CUDA")]),e._v(" "),n("p",[e._v("Right now we are targeting CUDA 10. When upgrading CUDA version, the\nfile "),n("code",[e._v("external/cuda_libdevice/slim_libdevice.10.bc")]),e._v(" should also be\nreplaced with a newer version.")]),e._v(" "),n("p",[e._v("To generate the slimmed version of libdevice based on a full\n"),n("code",[e._v("libdevice.X.bc")]),e._v(" file from a CUDA installation, use:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("ti task make_slim_libdevice "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("libdevice.X.bc file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);