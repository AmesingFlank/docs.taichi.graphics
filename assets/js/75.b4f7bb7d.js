(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{493:function(t,_,e){"use strict";e.r(_);var v=e(20),i=Object(v.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"开发与贡献指南"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发与贡献指南"}},[t._v("#")]),t._v(" 开发与贡献指南")]),t._v(" "),e("p",[t._v("首先，感谢你的参与和贡献！ 我们欢迎一切形式的贡献，包括但不限于")]),t._v(" "),e("ul",[e("li",[t._v("修复 Bug")]),t._v(" "),e("li",[t._v("提出和实现新功能")]),t._v(" "),e("li",[t._v("对本文档进行改进和翻译（欢迎前往[Taichi 中文文档](https://crowdin.com/project/taichi-programming-language/zh-CN#)）")]),t._v(" "),e("li",[t._v("完善错误时的提示，使之对用户更友好")]),t._v(" "),e("li",[t._v("提交新的测试用例")]),t._v(" "),e("li",[t._v("提交新的样例程序")]),t._v(" "),e("li",[t._v("提交编译器性能补丁")]),t._v(" "),e("li",[t._v("发布有关 Taichi 的博客文章和教程")]),t._v(" "),e("li",[t._v("加入我们的 "),e("a",{attrs:{href:"https://forum.taichi.graphics/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Taichi 论坛"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("向你的朋友们介绍 Taichi 或者直接在 GitHub 上星标"),e("a",{attrs:{href:"https://github.com/taichi-dev/taichi",target:"_blank",rel:"noopener noreferrer"}},[t._v("Taichi 项目"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("li",[t._v("修复文档，代码，注释中的拼写错误（像这样的小问题请直接创建一个 PR 而不必开一个 issue）")])]),t._v(" "),e("h2",{attrs:{id:"如何参与-bug-修复-添加新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何参与-bug-修复-添加新特性"}},[t._v("#")]),t._v(" 如何参与 Bug 修复，添加新特性")]),t._v(" "),e("p",[t._v("标记了 "),e("a",{attrs:{href:"https://github.com/taichi-dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22",target:"_blank",rel:"noopener noreferrer"}},[t._v("good first issue"),e("OutboundLink")],1),t._v(" 的 issue 对新手来说较容易上手。")]),t._v(" "),e("ul",[e("li",[t._v("请先在这个 issue 中留下一句评论（比如： "),e("em",[t._v("我知道怎么解决这个，并且乐于提供帮助！")]),t._v("）。这样大家就知道已经有人在解决这个问题了。 这样有助于避免重复劳动；")]),t._v(" "),e("li",[t._v("如果没有核心开发成员说明一个 issue 可能的解决方案，请简要地描述你的方案，并在开始前静候开发成员的回复确认。 这可以保障实现的简洁高效。")])]),t._v(" "),e("p",[t._v("标记了 "),e("a",{attrs:{href:"https://github.com/taichi-dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22welcome+contribution%22",target:"_blank",rel:"noopener noreferrer"}},[t._v("welcome contribution"),e("OutboundLink")],1),t._v(" 的 issue 相比之下更有挑战性但对新手仍然是比较友好的。")]),t._v(" "),e("h2",{attrs:{id:"基本准则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本准则"}},[t._v("#")]),t._v(" 基本准则")]),t._v(" "),e("ul",[e("li",[t._v("切实解决问题是我们的最终目标。")]),t._v(" "),e("li",[t._v("不要小题大做：用_简单_的方案去解决简单的问题，这样你可以抽出时间和精力处理那些真正困难的问题。")]),t._v(" "),e("li",[t._v("几乎每一个设计都有两面性。 如果利大于弊，那就可以看作是一个好的_决定_ ，请务必权衡利弊。 请务必权衡利弊。")]),t._v(" "),e("li",[t._v("调试是很困难的。 每一次的改动应该很小，这样 Bug 的源头就可以很容易地找到。")]),t._v(" "),e("li",[t._v("单元/集成测试是我们的好伙伴。")])]),t._v(" "),e("div",{staticClass:"custom-block note"},[e("p",{staticClass:"custom-block-title"},[t._v("注解")]),t._v(" "),e("p",[t._v('"软件设计过程中中存在两种模式：一种是使之结构简单明了到没有任何问题，另一种是令结构设计足够复杂到完美无缺。 '),e("em",[t._v("而第一种方案则要困难的多")]),t._v('。" ——'),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Tony_Hoare",target:"_blank",rel:"noopener noreferrer"}},[t._v("C.A.R. 霍尔"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("需要记住的一点是，Taichi 最初是作为一个学术研究项目而诞生的。 这通常意味着有些部分没有机会经过稳固坚实的设计。 虽然我们一直在努力提高代码质量，但这并不意味着项目能没有技术负债。 有些地方仍可能会过于复杂而让人感到困惑。 一旦你发现这种情形的存在，非常欢迎给我们提出 PR！ 😃")]),t._v(" "),e("h2",{attrs:{id:"高效率地沟通"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高效率地沟通"}},[t._v("#")]),t._v(" 高效率地沟通")]),t._v(" "),e("ul",[e("li",[t._v("传达了多少有效信息，比打了多少字重要的多。")]),t._v(" "),e("li",[t._v("在沟通中保持积极， 礼貌， 注意语言的组织性、 准确性。")]),t._v(" "),e("li",[t._v("注意除了文字之外，列表（Bulleted lists）也是我们表达过程中的好伙伴。")]),t._v(" "),e("li",[t._v("提交评论前请仔细预读：如果你是读者，你能读懂自己所写的内容么？")]),t._v(" "),e("li",[t._v("如果你的母语不是英语，考虑使用拼写检查器，例如 "),e("a",{attrs:{href:"https://app.grammarly.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Grammarly"),e("OutboundLink")],1),t._v("。")])]),t._v(" "),e("p",[t._v("请根据事实进行讨论与反馈，而不是个人感觉。 对我们所有人来说，保持一个友好、零责备的社区环境是非常重要的。 一些例子如下：")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[t._v("可接受的表达方式 😃 这种设计可能会让 Taichi 的初学者感到困惑。")])]),t._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[t._v("警告")]),t._v(" "),e("p",[t._v("不可接受的表达方式 这种设计真是太糟糕了。")])]),t._v(" "),e("h2",{attrs:{id:"提交良好的-pr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交良好的-pr"}},[t._v("#")]),t._v(" 提交良好的 PR")]),t._v(" "),e("ul",[e("li",[t._v("我们鼓励改动"),e("strong",[t._v("很小")]),t._v("的 PR。 一个 PR 理想情况下应该 "),e("strong",[t._v("只针对一个问题(issue)")]),t._v(" 。\n"),e("ul",[e("li",[t._v("也可以掺杂一些"),e("strong",[t._v("无关紧要")]),t._v("的优化重构，比如修正笔误；")]),t._v(" "),e("li",[t._v("审稿人保留要求 PR 作者删除一些"),e("strong",[t._v("无关紧要")]),t._v("的改动的权利。")])])]),t._v(" "),e("li",[t._v("PR 中的所有 commit 都应被"),e("strong",[t._v("压缩&合并到 master 分支的一个 commit 里")]),t._v(" 。")]),t._v(" "),e("li",[t._v("为保留清晰的提交日志 PR 作者"),e("strong",[t._v("不应该将多条 commit 压缩(squash) 后提交")]),t._v("；")]),t._v(" "),e("li",[t._v("当实现一个复杂的特性时，考虑将其分散为许多个小 PR，从而保证更具细节的开发时间线，保证与开发者更频繁的沟通。")]),t._v(" "),e("li",[t._v("如果你想更及时的得到核心开发成员的反馈\n"),e("ul",[e("li",[t._v("通过 GitHub 的 "),e("a",{attrs:{href:"https://github.blog/2019-02-14-introducing-draft-pull-requests/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Draft"),e("OutboundLink")],1),t._v(" 状态开一个 PR，这样就可以和我们实时分享你的进展了；")]),t._v(" "),e("li",[t._v("请确保在评论中 @ 相应开发成员，或者使用请求评审(request the review)。")])])]),t._v(" "),e("li",[t._v("如果你同时在处理多个 PR\n"),e("ul",[e("li",[t._v("互不依赖的 PR 都应该是基于 "),e("code",[t._v("master")]),t._v(" 衍生出的 "),e("strong",[t._v("不同")]),t._v(" 分支；")]),t._v(" "),e("li",[t._v("存在依赖的 PR 应该在所有前置 PR 合并入 "),e("code",[t._v("master")]),t._v(" 后再进行提出。")])])]),t._v(" "),e("li",[t._v("所有 PR 理想情况下都应该伴随着相应的"),e("strong",[t._v("测试")]),t._v("；")]),t._v(" "),e("li",[t._v("除了内部编译器的实现外，其余的 PR 都应该带有与其功能相对应的"),e("strong",[t._v("文档更新")]),t._v("；")]),t._v(" "),e("li",[t._v("所有 PR 必须通过**持续集成测试(continuous integration tests)**后才能被合并；")]),t._v(" "),e("li",[t._v("PR 的标题应当按照 "),e("code",[t._v("prtag")]),t._v(" 的要求编写；")]),t._v(" "),e("li",[t._v("除此之外，谷歌有篇相当棒的文章 "),e("a",{attrs:{href:"https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-your.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("how to have your PR merged quickly"),e("OutboundLink")],1),t._v(" 可供参考。 "),e("a",{attrs:{href:"https://github.com/yuanming-hu/public_files/blob/master/graphics/taichi/google_review_comments.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("[PDF]"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"审核与-pr-的合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#审核与-pr-的合并"}},[t._v("#")]),t._v(" 审核与 PR 的合并")]),t._v(" "),e("ul",[e("li",[t._v("请尝试遵循以下几个来自谷歌的建议\n"),e("ul",[e("li",[e("a",{attrs:{href:"https://testing.googleblog.com/2018/05/code-health-understanding-code-in-review.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Health: Understanding Code In Review"),e("OutboundLink")],1),t._v("；"),e("a",{attrs:{href:"https://github.com/yuanming-hu/public_files/blob/master/graphics/taichi/google_understanding_code.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("[PDF]"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Health: Respectful Reviews == Useful Reviews"),e("OutboundLink")],1),t._v("。 "),e("a",{attrs:{href:"https://github.com/yuanming-hu/public_files/blob/master/graphics/taichi/google_respectful_reviews.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("[PDF]"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[t._v("合并操作应当始终将 PR "),e("strong",[t._v("压缩&合并(squash and merge)")]),t._v(" 到主分支（默认为master）上；")]),t._v(" "),e("li",[t._v("主分支要求记录"),e("strong",[t._v("线性历史(linear history)")]),t._v("；")]),t._v(" "),e("li",[t._v("确保 PR 能够顺利通过"),e("strong",[t._v("持续集成测试")]),t._v("，文档更新等情况除外；")]),t._v(" "),e("li",[t._v("确保标题遵循 "),e("code",[t._v("prtag")]),t._v(" 的要求。")])]),t._v(" "),e("h2",{attrs:{id:"持续集成的运用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持续集成的运用"}},[t._v("#")]),t._v(" 持续集成的运用")]),t._v(" "),e("ul",[e("li",[t._v("持续集成(Continuous Integration, CI)，将在 CI 环境中"),e("strong",[t._v("构建")]),t._v("和"),e("strong",[t._v("测试")]),t._v("你所提交的 PR。")]),t._v(" "),e("li",[t._v("目前，Taichi 使用的集成测试服务是 "),e("a",{attrs:{href:"https://travis-ci.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("TravisCI"),e("OutboundLink")],1),t._v(" (OS X 和Linux 平台) 以及 "),e("a",{attrs:{href:"https://www.appveyor.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppVeyor"),e("OutboundLink")],1),t._v(" (Windows 平台)。")]),t._v(" "),e("li",[t._v("每次你推送提交到一个开着的 PR 时，CI 将被触发。")]),t._v(" "),e("li",[t._v("可以在提交消息前加上 "),e("code",[t._v("[skip ci]")]),t._v(" 以避免触发 CI。例如 "),e("code",[t._v("[skip ci] This commit will not trigger CI")])]),t._v(" "),e("li",[t._v("提交 ID 右侧有绿色对勾表示 CI 通过，红色叉号表示 CI 失败。")])]),t._v(" "),e("h2",{attrs:{id:"规范代码风格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范代码风格"}},[t._v("#")]),t._v(" 规范代码风格")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在本地，可以通过在命令行中运行 "),e("code",[t._v("ti format")]),t._v(" 来自动格式化代码。 请注意，在使用 "),e("code",[t._v("ti format")]),t._v(" 之前，您必须在本地安装 "),e("code",[t._v("clang-format-6.0")]),t._v(" 和 "),e("code",[t._v("yapf v0.29.0")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("如果不想在本地安装这些格式化工具，也可以使用我们的"),e("strong",[t._v("格式化服务器(format server)")]),t._v("。 这是一个 "),e("code",[t._v("ti format")]),t._v(" 的在线版本。")]),t._v(" "),e("ul",[e("li",[t._v("访问 ☷ "),e("a",{attrs:{href:"http://kun.csail.mit.edu:31415/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://kun.csail.mit.edu:31415/"),e("OutboundLink")],1),t._v(", 并点击选取所需格式化的 PR id。")]),t._v(" "),e("li",[t._v("回到 PR 页面，你将看到一个名为 @taichi-gardener (机器人) 的用户推送了一个名为 "),e("code",[t._v("[skip ci] enforce code format")]),t._v(" 的提交。")]),t._v(" "),e("li",[t._v("如果你没能找到机器人的提交，说明格式化服务器未发现任何不规范的代码格式。")]),t._v(" "),e("li",[t._v("然后请在本地分支中运行 "),e("code",[t._v("git pull")]),t._v(" 来提取格式化代码。")]),t._v(" "),e("li",[t._v("值得留意的是，备注(commit message) 带有 "),e("code",[t._v("[format]")]),t._v(" 的提交信息将自动触发格式化服务。 例如："),e("code",[t._v("[format] our commit message")])])])])]),t._v(" "),e("h2",{attrs:{id:"pr-标题格式和标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pr-标题格式和标签"}},[t._v("#")]),t._v(" PR 标题格式和标签")]),t._v(" "),e("p",[t._v("PR 标题将成为 "),e("code",[t._v("master")]),t._v(" 分支中提交历史的一部分，因此保证 PR 标题的可读性非常重要。")]),t._v(" "),e("ul",[e("li",[t._v("请务必在 PR 标题前附加上"),e("strong",[t._v("至少一个")]),t._v("标签，如 "),e("code",[t._v("[Lang]")]),t._v(" 等：\n"),e("ul",[e("li",[t._v("当使用多个标签时，确保标签之间只留有一个空格分隔；")]),t._v(" "),e("li",[t._v("例如， "),e("code",[t._v("\\[Lang\\]\\[refactor\\]")]),t._v("（没有空格）应该被格式化为 "),e("code",[t._v("\\[Lang\\] \\[refactor\\]")]),t._v("；")])])]),t._v(" "),e("li",[t._v("PR 标题主干部分的首字母应该大写：\n"),e("ul",[e("li",[t._v("例如，"),e("code",[t._v("[Doc] improve documentation")]),t._v(" 应该被格式化为 "),e("code",[t._v("[Doc] Improve documentation")]),t._v("；")]),t._v(" "),e("li",[t._v("同时，"),e("code",[t._v('[Lang] "ti.sqr(x)" is now deprecated')]),t._v(" 是被允许的，因为 "),e("code",[t._v('"')]),t._v("是一个符号。")])])]),t._v(" "),e("li",[t._v('请不要在 PR 标题中包括反引号 ("`")。')]),t._v(" "),e("li",[t._v('例如，"[Metal] Support bitmasked SNode"，"[OpenGL] AtomicMin/Max support"，或 "[Opt] [IR] Enhanced constant folding"。')])]),t._v(" "),e("p",[t._v("常用的标签：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("[Metal], [OpenGL], [CPU], [CUDA]")]),t._v("：后端；")]),t._v(" "),e("li",[e("code",[t._v("[LLVM]")]),t._v("：CPU 和 CUDA 共享的 LLVM 后端；")]),t._v(" "),e("li",[e("code",[t._v("[Lang]")]),t._v("：前端语言特性，包括语法糖；")]),t._v(" "),e("li",[e("code",[t._v("[Std]")]),t._v("：标准库，例如 "),e("code",[t._v("ti.Matrix")]),t._v(" 和 "),e("code",[t._v("ti.Vector")]),t._v("；")]),t._v(" "),e("li",[e("code",[t._v("[Sparse]")]),t._v("：稀疏计算；")]),t._v(" "),e("li",[e("code",[t._v("[IR]")]),t._v("：中间表示(intermediate representation, IR)；")]),t._v(" "),e("li",[e("code",[t._v("[Opt]")]),t._v("：IR 优化迭代轮数；")]),t._v(" "),e("li",[e("code",[t._v("[GUI]")]),t._v("：内嵌的 GUI 系统；")]),t._v(" "),e("li",[e("code",[t._v("[Refactor]")]),t._v("：代码重构；")]),t._v(" "),e("li",[e("code",[t._v("[CLI]")]),t._v("：命令行接口，例如 "),e("code",[t._v("ti")]),t._v(" 命令；")]),t._v(" "),e("li",[e("code",[t._v("[Doc]")]),t._v("：与 "),e("code",[t._v("docs/")]),t._v(" 目录下的文档相关；")]),t._v(" "),e("li",[e("code",[t._v("[Example]")]),t._v("：与 "),e("code",[t._v("examples/")]),t._v(" 目录下的样例程序相关；")]),t._v(" "),e("li",[e("code",[t._v("[Test]")]),t._v("：在 "),e("code",[t._v("tests/")]),t._v(" 目录下增加和改进测试程序；")]),t._v(" "),e("li",[e("code",[t._v("[Linux]")]),t._v("：与 Linux 平台相关；")]),t._v(" "),e("li",[e("code",[t._v("[Mac]")]),t._v("：与 Mac OS X 平台相关；")]),t._v(" "),e("li",[e("code",[t._v("[Windows]")]),t._v("：与 Windows 平台相关；")]),t._v(" "),e("li",[e("code",[t._v("[Perf]")]),t._v("：性能改进；")]),t._v(" "),e("li",[e("code",[t._v("[Misc]")]),t._v("：难以归类的杂项，如版本跳跃，格式优化等；")]),t._v(" "),e("li",[e("code",[t._v("[Bug]")]),t._v("：Bug修复；")]),t._v(" "),e("li",[t._v("在 "),e("a",{attrs:{href:"https://github.com/taichi-dev/taichi/blob/master/misc/prtags.json",target:"_blank",rel:"noopener noreferrer"}},[t._v("misc/prtags.json"),e("OutboundLink")],1),t._v(" 中查看更多标签。")]),t._v(" "),e("li",[t._v("在引进新标签时，请在首先使用该标签的 PR 中一并更新 "),e("code",[t._v("misc/prtags.json")]),t._v(" 列表，以便其他成员跟随使用。")])]),t._v(" "),e("div",{staticClass:"custom-block note"},[e("p",{staticClass:"custom-block-title"},[t._v("注解")]),t._v(" "),e("p",[t._v("我们感谢所有的贡献，但是我们不应该把每一个 PR 的标题暴露给终端用户。 因此，有必要将变更日志分类成用户应该知道什么和开发人员正在做什么。 而这是通过"),e("strong",[t._v("大写 PR 标签")]),t._v("实现的：")]),t._v(" "),e("ul",[e("li",[t._v("对用户可见/值得注意的 PR，应该将其一开始的标签以"),e("strong",[t._v("大写的首字母")]),t._v("进行标记，例如"),e("code",[t._v("[Metal], [OpenGL], [IR], [Lang], [CLI]")]),t._v("。 在发布新版本时，脚本（"),e("code",[t._v("python/taichi/make_changelog.py")]),t._v("）将生成一个突出显示这些更改（PR 标题）的变更日志。 因此，确保终端用户能够理解你的 PR 所做的工作是非常"),e("strong",[t._v("重要")]),t._v("的，而这都是"),e("strong",[t._v("基于你的 PR 标题")]),t._v("。")]),t._v(" "),e("li",[t._v("其他类型的 PR（底层开发/中间实现）应该使用"),e("strong",[t._v("全小写字母")]),t._v("的标签：例如"),e("code",[t._v("[metal], [opengl], [ir], [lang], [cli]")]),t._v("。")]),t._v(" "),e("li",[t._v("由于发布更新日志的生成方式，PR 标题中应该"),e("strong",[t._v("最多只有一个大写标记")]),t._v("，以防止重复的 PR 突出显示。 例如， "),e("code",[t._v("[GUI] [Mac] Support modifier keys")]),t._v(" (#1189) 就是一个不好的例子，我们应该用 "),e("code",[t._v("[gui] [Mac] Support modifier keys in GUI")]),t._v(" 来替代。 请只大写与 PR 内容最相关的标签。")])])]),t._v(" "),e("h2",{attrs:{id:"c-和-python-标准"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-和-python-标准"}},[t._v("#")]),t._v(" C++ 和 Python 标准")]),t._v(" "),e("p",[t._v("Taichi 的 C++ 模块是基于 C++ 17 编写的，Python 模块是基于 3.6+ 编写的。 所以你可以合理地认为 C++ 17 和 Python 3.6 特性总是可用的。")]),t._v(" "),e("h2",{attrs:{id:"taichi-编译器的开发建议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taichi-编译器的开发建议"}},[t._v("#")]),t._v(" Taichi 编译器的开发建议")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/zh/contribution/compilation.html"}},[t._v("Taichi 内核的生命周期")]),t._v("这一章也许有助于你理解我们的工作。 它解释了整个编译过程。")],1),t._v(" "),e("p",[t._v("如果你的工作涉及 IR 优化，请参见"),e("RouterLink",{attrs:{to:"/zh/contribution/utilities.html#benchmarking-and-regression-tests"}},[t._v("基准测试和回归测试")]),t._v("。")],1),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("ti.init(arch=desired_arch, **kwargs)")]),t._v(" 创建 Taichi 程序时，传入以下参数，可以使 Taichi 编译器打印出 IR：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("print_preprocessed = True")]),t._v("：打印前端 Python AST 转换的结果。 结果脚本(resulting scripts) 在执行时将生成一个 Taichi 前端 AST。")]),t._v(" "),e("li",[e("code",[t._v("print_ir = True")]),t._v(" 打印内核编译（不包括访问器）中的 Taichi IR 转换过程。")]),t._v(" "),e("li",[e("code",[t._v("print_accessor_ir = True")]),t._v("：打印数据访问器的 IR 转换过程，这是一种特殊而简单的内核的信息。 （这很少使用，除非你正在调试数据访问器相关的编译）")]),t._v(" "),e("li",[e("code",[t._v("print_struct_llvm_ir = True")]),t._v("：保存由 Taichi 结构编译器生成的 LLVM IR。")]),t._v(" "),e("li",[e("code",[t._v("print_kernel_llvm_ir = True")]),t._v("： 保存由 Taichi 内核编译器生成的 LLVM IR。")]),t._v(" "),e("li",[e("code",[t._v("print_kernel_llvm_ir_optimized = True")]),t._v("：保存每个内核优化的 LLVM IR。")]),t._v(" "),e("li",[e("code",[t._v("print_kernel_nvptx = True")]),t._v("：保存每个内核生成的 NVPTX（仅限 CUDA）。")])]),t._v(" "),e("div",{staticClass:"custom-block note"},[e("p",{staticClass:"custom-block-title"},[t._v("注解")]),t._v(" "),e("p",[t._v("Python 作用域中的数据访问器被实现为特殊的 Taichi 内核。 例如，"),e("code",[t._v("x[1, 2, 3] = 3")]),t._v(" 将调用 "),e("code",[t._v("x")]),t._v(" 的写访问器内核，"),e("code",[t._v("print(y[42])")]),t._v(" 将调用 "),e("code",[t._v("y")]),t._v(" 的读取访问器内核。")])]),t._v(" "),e("h2",{attrs:{id:"目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),e("p",[t._v("关键目录包括：")]),t._v(" "),e("p",[e("em",[t._v("（下面的目录可以通过"),e("a",{attrs:{href:"https://linux.die.net/man/1/tree",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("tree . -L 2")]),e("OutboundLink")],1),t._v("生成）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".\n├── benchmarks              # 性能基准\n├── docs                    # 文档\n├── examples                # 样例程序\n├── external                # 扩展库\n├── misc                    # 零散（但仍很有用）的文件\n├── python                  # Python 前端实现\n│   ├── core                # Taichi 核心的加载 & 交互\n│   ├── lang                # 嵌入在 Python 中的 Taichi 语言 & 语法（重要）\n│   ├── tools               # 提供给终端用户的便捷工具\n│   └── misc                # 各种各样的工具\n├── taichi                  # 核心编译器实现\n│   ├── analysis            # 静态分析\n│   ├── backends            # 基于设备的代码生成/运行时环境\n│   ├── codegen             # 代码生成基类\n│   ├── common\n│   ├── gui                 # GUI 系统\n│   ├── inc                 # 需要被重复引用的定义文件\n│   ├── ir                  # 中间表示\n│   ├── jit                 # 即时(Just-in-Time) 编译器基类\n│   ├── llvm                # LLVM 实用工具\n│   ├── math                # 数学类使用工具\n│   ├── platform            # 平台支持依赖\n│   ├── program             # 上层结构\n│   ├── python              # C++/Python 接口\n│   ├── runtime             # LLVM 运行环境\n│   ├── struct              # 结构编译器基类\n│   ├── system              # 操作系统相关的基础结构\n│   ├── transforms          # IR 转换传递(Passes)\n│   └── util                # 各种各样的工具\n└── tests                   # 功能测试\n    ├── cpp                 # C++ 测试\n    └── python              # Python 测试（重要）\n")])])]),e("h2",{attrs:{id:"测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),e("p",[t._v("测试程序应该添加到 "),e("code",[t._v("tests/")]),t._v(" 目录下。")]),t._v(" "),e("h3",{attrs:{id:"命令行工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令行工具"}},[t._v("#")]),t._v(" 命令行工具")]),t._v(" "),e("ul",[e("li",[t._v("使用 "),e("code",[t._v("ti test")]),t._v(" 运行所有测试用例。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("ti test -v")]),t._v(" 查看详细输出信息。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("ti test -C")]),t._v(" 运行测试并记录代码覆盖率，参阅"),e("RouterLink",{attrs:{to:"/zh/contribution/utilities.html#coverage"}},[t._v("代码测试覆盖率")]),t._v("查看更多信息。")],1),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("ti test -a <arch(s)>")]),t._v(" 针对指定后端进行测试。 例如，"),e("code",[t._v("ti test -a cuda,metal")]),t._v("。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("ti test -na <arch(s)>")]),t._v(" 测试除指定架构外的其余所有架构。 例如，"),e("code",[t._v("ti test -na opengl,x64")]),t._v("。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("ti test <filename(s)>")]),t._v(" 运行指定文件名的测试实例。 例如，"),e("code",[t._v("ti test numpy_io")]),t._v(" 将会运行 "),e("code",[t._v("tests/python/test_numpy_io.py")]),t._v(" 中的所有测试用例。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("ti test -c")]),t._v(" 以仅运行 C++ 测试程序。 例如，"),e("code",[t._v("ti test -c alg_simp")]),t._v(" 将会运行 "),e("code",[t._v("tests/cpp/test_alg_simp.cpp")]),t._v(" 测试。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("ti test -k <key>")]),t._v(" 运行与指定关键词相匹配的测试。 例如，"),e("code",[t._v('ti test linalg -k "cross or diag"')]),t._v(" 将会运行 "),e("code",[t._v("tests/python/test_linalg.py")]),t._v(" 中的 "),e("code",[t._v("test_cross")]),t._v(" 和 "),e("code",[t._v("test_diag")]),t._v("。")])]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("ti test -h")]),t._v(" 来查看更多选项。")]),t._v(" "),e("p",[t._v("要了解更多有关如何编写测试用例的详细信息，请参阅"),e("RouterLink",{attrs:{to:"/zh/contribution/write_test.html"}},[t._v("编写Python测试的工作流程")]),t._v("章节。")],1),t._v(" "),e("h2",{attrs:{id:"文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文档"}},[t._v("#")]),t._v(" 文档")]),t._v(" "),e("p",[t._v("文档被放置于 "),e("code",[t._v("docs/")]),t._v(" 目录下。")]),t._v(" "),e("ul",[e("li",[t._v("我们使用 "),e("a",{attrs:{href:"https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("reStructured text"),e("OutboundLink")],1),t._v("(.rst) 来撰写文档。")]),t._v(" "),e("li",[t._v("我们使用 "),e("a",{attrs:{href:"https://taichi.readthedocs.io/en/stable",target:"_blank",rel:"noopener noreferrer"}},[t._v("readthedocs.io"),e("OutboundLink")],1),t._v(" 在线托管我们的文档。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("ti doc")]),t._v(" 在本地构建文档。")]),t._v(" "),e("li",[t._v("打开 "),e("code",[t._v("docs/build/index.html")]),t._v(" 以查看构建的文档。")])]),t._v(" "),e("div",{staticClass:"custom-block note"},[e("p",{staticClass:"custom-block-title"},[t._v("注解")]),t._v(" "),e("p",[t._v("在 Linux/OS X 下, 使用 "),e("code",[t._v("watch -n 1 ti doc")]),t._v(" 以持续地构建文档。")]),t._v(" "),e("p",[t._v("如果 OpenGL 后端检测器一直在创建新窗口，请在 "),e("code",[t._v("ti doc")]),t._v(" 前执行 "),e("code",[t._v("export TI_WITH_OPENGL=0")]),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"跨-python-c-的高效代码导航"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨-python-c-的高效代码导航"}},[t._v("#")]),t._v(" 跨 Python/C++ 的高效代码导航")]),t._v(" "),e("p",[t._v("如果你使用的是前端语言（Python/C++接口），要在代码库中导航，"),e("a",{attrs:{href:"https://github.com/tqchen/ffi-navigator",target:"_blank",rel:"noopener noreferrer"}},[t._v("ffi-navigator"),e("OutboundLink")],1),t._v(" 允许从 Python 跳转到它们在 C++ 中绑定的定义。按照前述链接的 README 设置你的编辑器。")]),t._v(" "),e("h2",{attrs:{id:"升级-cuda"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#升级-cuda"}},[t._v("#")]),t._v(" 升级 CUDA")]),t._v(" "),e("p",[t._v("目前我们的开发工作是针对 CUDA 10。 在升级 CUDA 版本时，当前 "),e("code",[t._v("external/cuda_libdevice/slim_libdevice.10.bc")]),t._v(" 文件会被新的版本所取代。")]),t._v(" "),e("p",[t._v("要生成基于 CUDA 安装时完整 "),e("code",[t._v("libdevice.X.bc")]),t._v(" 文件的精简版本，使用：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("ti task make_slim_libdevice "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("libdevice.X.bc file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])}),[],!1,null,null,null);_.default=i.exports}}]);