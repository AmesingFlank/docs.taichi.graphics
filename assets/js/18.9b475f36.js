(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{425:function(t,n,e){"use strict";e.r(n);var s=e(20),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"internal-designs-wip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#internal-designs-wip"}},[t._v("#")]),t._v(" Internal designs (WIP)")]),t._v(" "),e("h2",{attrs:{id:"intermediate-representation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#intermediate-representation"}},[t._v("#")]),t._v(" Intermediate representation")]),t._v(" "),e("p",[t._v("Use "),e("code",[t._v("ti.init(print_ir=True)")]),t._v(" to print IR on the console.")]),t._v(" "),e("p",[t._v("See "),e("RouterLink",{attrs:{to:"/contribution/compilation.html"}},[t._v("Life of a Taichi kernel")]),t._v(" for more details about\nthe JIT system of Taichi.")],1),t._v(" "),e("h2",{attrs:{id:"data-structure-organization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-structure-organization"}},[t._v("#")]),t._v(" Data structure organization")]),t._v(" "),e("p",[t._v("The internal organization of Taichi's data structure can be confusing.\nIt is important to distinguish the concept of "),e("strong",[t._v("containers")]),t._v(", "),e("strong",[t._v("cells")]),t._v(",\nand "),e("strong",[t._v("components")]),t._v(".")]),t._v(" "),e("ul",[e("li",[t._v("A "),e("strong",[t._v("container")]),t._v(" can have multiple "),e("strong",[t._v("cells")]),t._v(". The numbers of\n"),e("strong",[t._v("cells")]),t._v(" are recommended to be powers of two.")]),t._v(" "),e("li",[t._v("A "),e("strong",[t._v("cell")]),t._v(" can have multiple "),e("strong",[t._v("components")]),t._v(".")]),t._v(" "),e("li",[t._v("Each "),e("strong",[t._v("component")]),t._v(" is a "),e("strong",[t._v("container")]),t._v(" of a lower-level SNode.")])]),t._v(" "),e("p",[t._v("Note that containers of "),e("code",[t._v("place")]),t._v(" SNodes do have cells. Instead, they\ndirectly contain numerical values.")]),t._v(" "),e("p",[t._v("Consider the following example:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# misc/listgen_demo.py")]),t._v("\n\nx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i32"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ny "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i32"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i32"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nS0 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root\nS1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pointer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nS2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# S3: x; S4: y")]),t._v("\n\nS5 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# S6: z")]),t._v("\n")])])]),e("ul",[e("li",[t._v("The whole data structure is an "),e("code",[t._v("S0root")]),t._v(" "),e("strong",[t._v("container")]),t._v(", containing\n"),e("ul",[e("li",[e("code",[t._v("1x")]),t._v(" "),e("code",[t._v("S0root")]),t._v(" "),e("strong",[t._v("cell")]),t._v(", which has only one "),e("strong",[t._v("component")]),t._v(", which\nis\n"),e("ul",[e("li",[t._v("An "),e("code",[t._v("S1pointer")]),t._v(" "),e("strong",[t._v("container")]),t._v(", containing\n"),e("ul",[e("li",[t._v("4x "),e("code",[t._v("S1pointer")]),t._v(" "),e("strong",[t._v("cells")]),t._v(", each with two "),e("strong",[t._v("components")]),t._v(",\nwhich are\n"),e("ul",[e("li",[t._v("An "),e("code",[t._v("S2dense")]),t._v(" "),e("strong",[t._v("container")]),t._v(", containing\n"),e("ul",[e("li",[t._v("2x "),e("code",[t._v("S2dense")]),t._v(" "),e("strong",[t._v("cells")]),t._v(", each with two\n"),e("strong",[t._v("components")]),t._v(", which are\n"),e("ul",[e("li",[t._v("An "),e("code",[t._v("S3place_x")]),t._v(" container which directly\ncontains a "),e("code",[t._v("x: ti.i32")]),t._v(" value")]),t._v(" "),e("li",[t._v("An "),e("code",[t._v("S4place_y")]),t._v(" container which directly\ncontains a "),e("code",[t._v("y: ti.i32")]),t._v(" value")])])])])]),t._v(" "),e("li",[t._v("An "),e("code",[t._v("S5dense")]),t._v(" "),e("strong",[t._v("container")]),t._v(", containing\n"),e("ul",[e("li",[t._v("2x "),e("code",[t._v("S5dense")]),t._v(" "),e("strong",[t._v("cells")]),t._v(", each with one\n"),e("strong",[t._v("component")]),t._v(", which is\n"),e("ul",[e("li",[t._v("An "),e("code",[t._v("S6place")]),t._v(" container which directly\ncontains a "),e("code",[t._v("z: ti.i32")]),t._v(" value")])])])])])])])])])])])])])]),t._v(" "),e("p",[t._v("The following figure shows the hierarchy of the data structure. The\nnumbers are "),e("code",[t._v("indices")]),t._v(" of the containers and cells.")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/taichi-dev/public_files/fa03e63ca4e161318c8aa9a5db7f4a825604df88/taichi/data_structure_organization.png",alt:"image"}})]),t._v(" "),e("p",[t._v("Note that the "),e("code",[t._v("S0root")]),t._v(" container and cell do not have an "),e("code",[t._v("index")]),t._v(".")]),t._v(" "),e("p",[t._v("In summary, we will have the following containers:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("1 S0root")]),t._v(" container")]),t._v(" "),e("li",[e("code",[t._v("1 S1pointer")]),t._v(" container")]),t._v(" "),e("li",[e("code",[t._v("4 S2dense")]),t._v(" containers")]),t._v(" "),e("li",[e("code",[t._v("4 S5dense")]),t._v(" containers")]),t._v(" "),e("li",[e("code",[t._v("8 S3place_x")]),t._v(" containers, each directly contains an "),e("code",[t._v("i32")]),t._v(" value")]),t._v(" "),e("li",[e("code",[t._v("8 S4place_y")]),t._v(" containers, each directly contains an "),e("code",[t._v("i32")]),t._v(" value")]),t._v(" "),e("li",[e("code",[t._v("8 S6place_z")]),t._v(" containers, each directly contains an "),e("code",[t._v("i32")]),t._v(" value")])]),t._v(" "),e("p",[t._v("... and the following cells:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("1 S0root")]),t._v(" cell")]),t._v(" "),e("li",[e("code",[t._v("4 S1pointer")]),t._v(" cells")]),t._v(" "),e("li",[e("code",[t._v("8 S2dense")]),t._v(" cells")]),t._v(" "),e("li",[e("code",[t._v("8 S5dense")]),t._v(" cells")])]),t._v(" "),e("p",[t._v("Again, note that "),e("code",[t._v("S3place_x, S4place_x, S6place_x")]),t._v(" SNodes do "),e("strong",[t._v("not")]),t._v("\nhave corresponding cells.")]),t._v(" "),e("p",[t._v("In struct compilers, each SNode has two types: "),e("code",[t._v("container")]),t._v(" type and\n"),e("code",[t._v("cell")]),t._v(" type. "),e("strong",[t._v("Components")]),t._v(" of a higher level SNode "),e("strong",[t._v("cell")]),t._v(" are\n"),e("strong",[t._v("containers")]),t._v(" of a lower level SNode.")]),t._v(" "),e("p",[t._v("Note that "),e("strong",[t._v("cells")]),t._v(" are never exposed to end-users.")]),t._v(" "),e("p",[e("strong",[t._v("List generation")]),t._v(" generates lists of SNode "),e("strong",[t._v("containers")]),t._v(" (instead of\nSNode "),e("strong",[t._v("cells")]),t._v(").")]),t._v(" "),e("div",{staticClass:"custom-block note"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("We are on our way to remove usages of "),e("strong",[t._v("children")]),t._v(", "),e("strong",[t._v("instances")]),t._v(", and\n"),e("strong",[t._v("elements")]),t._v(" in Taichi. These are very ambiguous terms.")])]),t._v(" "),e("h2",{attrs:{id:"list-generation-wip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-generation-wip"}},[t._v("#")]),t._v(" List generation (WIP)")]),t._v(" "),e("p",[t._v("Struct-fors in Taichi loop over all active elements of a (sparse) data\nstructure "),e("strong",[t._v("in parallel")]),t._v(". Evenly distributing work onto processor cores\nis challenging on sparse data structures: naively splitting an irregular\ntree into pieces can easily lead to partitions with drastically\ndifferent numbers of leaf elements.")]),t._v(" "),e("p",[t._v("Our strategy is to generate lists of active SNode elements layer by\nlayer. The list generation computation happens on the same device as\nnormal computation kernels, depending on the "),e("code",[t._v("arch")]),t._v(" argument when the\nuser calls "),e("code",[t._v("ti.init")]),t._v(".")]),t._v(" "),e("p",[t._v("List generations flatten the data structure leaf elements into a 1D\ndense array, circumventing the irregularity of incomplete trees. Then we\ncan simply invoke a regular "),e("strong",[t._v("parallel for")]),t._v(" over the list.")]),t._v(" "),e("p",[t._v("For example,")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# misc/listgen_demo.py")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" taichi "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" ti\n\nti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("print_ir"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i32"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nS0 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root\nS1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bitmasked"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("kernel")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nfunc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("gives you the following IR:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$0 = offloaded clear_list S1dense\n$1 = offloaded listgen S0root->S1dense\n$2 = offloaded clear_list S2bitmasked\n$3 = offloaded listgen S1dense->S2bitmasked\n$4 = offloaded struct_for(S2bitmasked) block_dim=0 {\n  <i32 x1> $5 = loop index 0\n  print i, $5\n}\n")])])]),e("p",[t._v("Note that "),e("code",[t._v("func")]),t._v(" leads to two list generations:")]),t._v(" "),e("ul",[e("li",[t._v("(Tasks "),e("code",[t._v("$0")]),t._v(" and "),e("code",[t._v("$1")]),t._v(") based on the list of "),e("code",[t._v("root")]),t._v(" node ("),e("code",[t._v("S0")]),t._v("),\ngenerate the list of the "),e("code",[t._v("dense")]),t._v(" nodes ("),e("code",[t._v("S1")]),t._v(");")]),t._v(" "),e("li",[t._v("(Tasks "),e("code",[t._v("$2")]),t._v(" and "),e("code",[t._v("$3")]),t._v(") based on the list of "),e("code",[t._v("dense")]),t._v(" nodes ("),e("code",[t._v("S1")]),t._v("),\ngenerate the list of "),e("code",[t._v("bitmasked")]),t._v(" nodes ("),e("code",[t._v("S2")]),t._v(").")])]),t._v(" "),e("p",[t._v("The list of "),e("code",[t._v("root")]),t._v(" node always has exactly one element (instance), so we\nnever clear or re-generate this list.")]),t._v(" "),e("div",{staticClass:"custom-block note"},[e("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),e("p",[t._v("The list of "),e("code",[t._v("place")]),t._v(" (leaf) nodes (e.g., "),e("code",[t._v("S3")]),t._v(" in this example) is never\ngenerated. Instead, we simply loop over the list of their parent nodes,\nand for each parent node we enumerate the "),e("code",[t._v("place")]),t._v(" nodes on-the-fly\n(without actually generating a list).")]),t._v(" "),e("p",[t._v("The motivation for this design is to amortize list generation overhead.\nGenerating one list element per leaf node ("),e("code",[t._v("place")]),t._v(" SNode) element is too\nexpensive, likely much more expensive than the essential computation\nhappening on the leaf element. Therefore we only generate their parent\nelement list, so that the list generation cost is amortized over\nmultiple child elements of a second-to-last-level SNode element.")]),t._v(" "),e("p",[t._v("In the example above, although we have "),e("code",[t._v("16")]),t._v(" instances of "),e("code",[t._v("x")]),t._v(", we only\ngenerate a list of "),e("code",[t._v("4")]),t._v(" "),e("code",[t._v("bitmasked")]),t._v(" nodes (and "),e("code",[t._v("1")]),t._v(" "),e("code",[t._v("dense")]),t._v(" node).")])]),t._v(" "),e("h2",{attrs:{id:"statistics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#statistics"}},[t._v("#")]),t._v(" Statistics")]),t._v(" "),e("p",[t._v("In some cases, it is helpful to gather certain quantitative information\nabout internal events during Taichi program execution. The "),e("code",[t._v("Statistics")]),t._v("\nclass is designed for this purpose.")]),t._v(" "),e("p",[t._v("Usage:")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"taichi/util/statistics.h"')])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// add 1.0 to counter "codegen_offloaded_tasks"')]),t._v("\ntaichi"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"codegen_offloaded_tasks"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// add the number of statements in "ir" to counter "codegen_statements"')]),t._v("\ntaichi"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"codegen_statements"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" irpass"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("analysis"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count_statements")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ir"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Note the keys are "),e("code",[t._v("std::string")]),t._v(" and values are "),e("code",[t._v("double")]),t._v(".")]),t._v(" "),e("p",[t._v("To print out all statistics in Python:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_stat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"why-python-frontend"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-python-frontend"}},[t._v("#")]),t._v(" Why Python frontend")]),t._v(" "),e("p",[t._v("Embedding Taichi in "),e("code",[t._v("python")]),t._v(" has the following advantages:")]),t._v(" "),e("ul",[e("li",[t._v("Easy to learn. Taichi has a very similar syntax to Python.")]),t._v(" "),e("li",[t._v("Easy to run. No ahead-of-time compilation is needed.")]),t._v(" "),e("li",[t._v("This design allows people to reuse existing python infrastructure:\n"),e("ul",[e("li",[t._v("IDEs. A python IDE mostly works for Taichi with syntax\nhighlighting, syntax checking, and autocomplete.")]),t._v(" "),e("li",[t._v("Package manager (pip). A developed Taichi application and be\neasily submitted to "),e("code",[t._v("PyPI")]),t._v(" and others can easily set it up with\n"),e("code",[t._v("pip")]),t._v(".")]),t._v(" "),e("li",[t._v("Existing packages. Interacting with other python components\n(e.g. "),e("code",[t._v("matplotlib")]),t._v(" and "),e("code",[t._v("numpy")]),t._v(") is just trivial.")])])]),t._v(" "),e("li",[t._v("The built-in AST manipulation tools in "),e("code",[t._v("python")]),t._v(" allow us to do\nmagical things, as long as the kernel body can be parsed by the\nPython parser.")])]),t._v(" "),e("p",[t._v("However, this design has drawbacks as well:")]),t._v(" "),e("ul",[e("li",[t._v("Taichi kernels must parse-able by Python parsers. This means Taichi\nsyntax cannot go beyond Python syntax.\n"),e("ul",[e("li",[t._v("For example, indexing is always needed when accessing elements\nin Taichi fields, even if the fields is 0D. Use "),e("code",[t._v("x[None] = 123")]),t._v("\nto set the value in "),e("code",[t._v("x")]),t._v(" if "),e("code",[t._v("x")]),t._v(" is 0D. This is because "),e("code",[t._v("x = 123")]),t._v("\nwill set "),e("code",[t._v("x")]),t._v(" itself (instead of its containing value) to be the\nconstant "),e("code",[t._v("123")]),t._v(" in python syntax, and, unfortunately, we cannot\nmodify this behavior.")])])]),t._v(" "),e("li",[t._v("Python has relatively low performance. This can cause a performance\nissue when initializing large Taichi fields with pure python\nscripts. A Taichi kernel should be used to initialize a huge fields.")])]),t._v(" "),e("h2",{attrs:{id:"virtual-indices-v-s-physical-indices"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#virtual-indices-v-s-physical-indices"}},[t._v("#")]),t._v(" Virtual indices v.s. physical indices")]),t._v(" "),e("p",[t._v("In Taichi, "),e("em",[t._v("virtual indices")]),t._v(" are used to locate elements in fields, and\n"),e("em",[t._v("physical indices")]),t._v(" are used to specify data layouts in memory.")]),t._v(" "),e("p",[t._v("For example,")]),t._v(" "),e("ul",[e("li",[t._v("In "),e("code",[t._v("a[i, j, k]")]),t._v(", "),e("code",[t._v("i")]),t._v(", "),e("code",[t._v("j")]),t._v(", and "),e("code",[t._v("k")]),t._v(" are "),e("strong",[t._v("virtual")]),t._v(" indices.")]),t._v(" "),e("li",[t._v("In "),e("code",[t._v("for i, j in x:")]),t._v(", "),e("code",[t._v("i")]),t._v(" and "),e("code",[t._v("j")]),t._v(" are "),e("strong",[t._v("virtual")]),t._v(" indices.")]),t._v(" "),e("li",[e("code",[t._v("ti.i, ti.j, ti.k, ti.l, ...")]),t._v(" are "),e("strong",[t._v("physical")]),t._v(" indices.")]),t._v(" "),e("li",[t._v("In struct-for statements, "),e("code",[t._v("LoopIndexStmt::index")]),t._v(" is a "),e("strong",[t._v("physical")]),t._v("\nindex.")])]),t._v(" "),e("p",[t._v("The mapping between virtual indices and physical indices for each\n"),e("code",[t._v("SNode")]),t._v(" is stored in "),e("code",[t._v("SNode::physical_index_position")]),t._v(". I.e.,\n"),e("code",[t._v("physical_index_position[i]")]),t._v(" answers the question: "),e("strong",[t._v("which physical\nindex does the i-th virtual index")]),t._v(" correspond to?")]),t._v(" "),e("p",[t._v("Each "),e("code",[t._v("SNode")]),t._v(" can have a different virtual-to-physical mapping.\n"),e("code",[t._v("physical_index_position[i] == -1")]),t._v(" means the "),e("code",[t._v("i")]),t._v("-th virtual index does\nnot corrspond to any physical index in this "),e("code",[t._v("SNode")]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("SNode")]),t._v(" s in handy dense fields (i.e.,\n"),e("code",[t._v("a = ti.field(ti.i32, shape=(128, 256, 512))")]),t._v(") have "),e("strong",[t._v("trivial")]),t._v("\nvirtual-to-physical mapping, e.g. "),e("code",[t._v("physical_index_position[i] = i")]),t._v(".")]),t._v(" "),e("p",[t._v("However, more complex data layouts, such as column-major 2D fields can\nlead to "),e("code",[t._v("SNodes")]),t._v(" with "),e("code",[t._v("physical_index_position[0] = 1")]),t._v(" and\n"),e("code",[t._v("physical_index_position[1] = 0")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f32"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shape"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nb "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f32"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("j"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dense"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nti"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_runtime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("materialize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmapping_a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("physical_index_position"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" mapping_a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nmapping_b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("physical_index_position"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" mapping_b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Note that b is column-major:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the virtual first index exposed to the user comes second in memory layout.")]),t._v("\n")])])]),e("p",[t._v("Taichi supports up to 8 ("),e("code",[t._v("constexpr int taichi_max_num_indices = 8")]),t._v(")\nvirtual indices and physical indices.")])])}),[],!1,null,null,null);n.default=a.exports}}]);